{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#accueil","title":"Accueil","text":"<p>\u00c9preuve pratique</p> <p>Les exercices de l'\u00e9preuve pratique du bac NSI sont sortis (disponible en cliquant ici) ! Je vous propose de collectivement corriger ces exercices ! \ud83e\udd1d</p> <p>Un petit programme pour nous r\u00e9partir le travail de mani\u00e8re \u00e9quitable :</p> <pre><code>from pprint import pprint\nfrom random import sample\nfrom itertools import batched\n\neleves = ['Ezeykiel', 'Isma\u00ebl', 'Louis', 'Lucas',\n        'Mallory', 'Nathan', 'Rafa\u00ebl', 'Thomas']\nnb_sujets = 48\nsujets = sample(range(1, nb_sujets + 1), nb_sujets)\npprint({e: s for e, s in zip(eleves, batched(sujets, nb_sujets // len(eleves)))})\n</code></pre> <pre><code>{'Ezeykiel': (5, 4, 40, 20, 30, 42),\n'Isma\u00ebl': (18, 47, 16, 27, 26, 22),\n'Louis': (46, 14, 7, 21, 29, 2),\n'Lucas': (11, 8, 3, 19, 17, 33),\n'Mallory': (12, 39, 1, 45, 34, 36),\n'Nathan': (31, 35, 48, 43, 15, 10),\n'Rafa\u00ebl': (9, 23, 32, 24, 38, 37),\n'Thomas': (25, 28, 13, 6, 41, 44)}\n</code></pre> <p>Tout ceci s'est \u00e9videmment d\u00e9roul\u00e9 sous le contr\u00f4le d'un huissier de justice.</p> <p>Travaux en cours</p> <ul> <li>Finir l'algorithme de Dijkstra et le bulletin m\u00e9t\u00e9o et me l'envoyer !</li> <li>Les arbres binaires</li> <li>Corriger les exercices de l'\u00e9preuve pratique attitr\u00e9es</li> </ul>"},{"location":"#liens-utiles","title":"Liens utiles","text":"<ul> <li> <p> Programme en vigueur de sp\u00e9cialit\u00e9 NSI de terminale g\u00e9n\u00e9rale</p> </li> <li> <p>  Annales des \u00e9preuves \u00e9crites et pratiques au baccalaur\u00e9at NSI</p> </li> </ul>"},{"location":"correction/","title":"La correction","text":""},{"location":"correction/#la-correction","title":"La correction","text":"<p>M'envoyer vos corrections de sujet !</p>"},{"location":"D%C3%A9fis/1schelling/","title":"Mod\u00e8le de s\u00e9gr\u00e9gation de Schelling","text":""},{"location":"D%C3%A9fis/1schelling/#modele-de-segregation-de-schelling","title":"Mod\u00e8le de s\u00e9gr\u00e9gation de Schelling","text":""},{"location":"D%C3%A9fis/1schelling/#introduction","title":"Introduction","text":"<p>Dans les ann\u00e9es 1970, Thomas C. Schelling a propos\u00e9 un mod\u00e8le pour montrer qu'une forte s\u00e9gr\u00e9gation spatiale peut \u00eatre le r\u00e9sultat collectif de pr\u00e9f\u00e9rences individuelles qui ne visent pas, elles, \u00e0 une telle s\u00e9gr\u00e9gation.</p>"},{"location":"D%C3%A9fis/1schelling/#description-du-modele","title":"Description du mod\u00e8le","text":"<p>Prenez un \u00e9chiquier et r\u00e9partissez dessus al\u00e9atoirement des pions noirs et des pions blancs. Vous avez l\u00e0 une repr\u00e9sentation tr\u00e8s rudimentaire d'une aire urbaine o\u00f9 se c\u00f4toient deux populations. Ce pourrait \u00eatre des catholiques et des protestants, des riches et des pauvres ou tout autre clivage.</p> <p>Schelling ajoute ensuite une r\u00e8gle de d\u00e9placement des pions. Bien que tol\u00e9rant, un individu d\u00e9m\u00e9nage si moins d'un tiers de ses voisins imm\u00e9diats partagent sa couleur. Dans le cas contraire, il est satisfait et reste sur place. Ce processus est r\u00e9p\u00e9t\u00e9 jusqu'\u00e0 ce que la situation se stabilise, lorsque tous les pions sont satisfaits de leur voisinage.</p>"},{"location":"D%C3%A9fis/1schelling/#details-de-limplementation","title":"D\u00e9tails de l'impl\u00e9mentation","text":"<p>Par la suite, on parle d'agents pour d\u00e9signer ces pions, et grille pour d\u00e9signer l'\u00e9chiquier.</p> <ul> <li> <p>On dispose des agents bleus et rouges sur une grille de taille \\(n \\times n\\).</p> </li> <li> <p>Cette grille sera initialement rempli al\u00e9atoirement par autant d'agents bleus, d'agents rouges et de cellules vides.</p> </li> <li> <p>La grille sera repr\u00e9sent\u00e9e par un tableau \u00e0 deux dimensions d'entiers. La valeur :</p> <ul> <li><code>0</code> repr\u00e9sente une cellule vide</li> <li><code>1</code> repr\u00e9sente un agent bleu</li> <li><code>2</code> repr\u00e9sente un agent rouge</li> </ul> <p></p> </li> <li> <p>On consid\u00e9rera le voisinage d'une cellule comme ses huit cellules adjacentes, appel\u00e9 voisinage de Moore.</p> <p></p> </li> <li> <p>Les bords oppos\u00e9s de la grille sont connect\u00e9s. Ainsi m\u00eame les cellules au bord de la grille auront huit voisins :</p> <p></p> <p>Une telle grille est une surface toro\u00efdale, cela signifie que la grille forme une structure topologique similaire \u00e0 celle d'un tore en math\u00e9matiques. </p> </li> <li> <p>Le taux de satisfaction d'une cellule \\(\\in \\big[0, 1\\big]\\) correspond au rapport :</p> \\[     \\frac{\\text{Nombre d'agents voisins de m\u00eame couleur}}{\\text{Nombre d'agents voisins}} \\] <p>Il est important de noter que ce calcul exclu les cellules vides voisines \u00e0 la cellule.</p> </li> <li> <p>Le seuil de satisfaction \\(\\in \\big[0, 1\\big]\\) correspond au taux de satisfaction \u00e0 partir duquel un agent est satisfait de son entourage. Dans la description pr\u00e9c\u00e9dente du mod\u00e8le de Schelling, ce seuil \u00e9tait fix\u00e9 \u00e0 \\(\\frac{1}{3}\\).</p> </li> <li> <p>Les agents insatisfaits seront retir\u00e9s de la grille puis d\u00e9plac\u00e9s al\u00e9atoirement sur des cellules vides de la grille.</p> </li> <li> <p>Lorsque tous les agents sont satisfaits de leur voisinage, on parle de situation stabilis\u00e9e.</p> </li> </ul>"},{"location":"D%C3%A9fis/1schelling/#demarche","title":"D\u00e9marche","text":""},{"location":"D%C3%A9fis/1schelling/#simulation-du-modele-en-python","title":"Simulation du mod\u00e8le en Python","text":"Bonne pratique - Nommer les valeurs arbitraires <p>Une pratique recommand\u00e9e en programmation pour \u00e9viter la manipulation directe de valeurs arbitraires consiste \u00e0 les dissimuler sous des noms de variables. Dans notre cas, au d\u00e9but du programme, il est possible de d\u00e9finir les trois constantes repr\u00e9sentant les diff\u00e9rents \u00e9tats possibles d'une cellule de la grille de la mani\u00e8re suivante :</p> <pre><code>VIDE  = 0\nBLEU  = 1\nROUGE = 2\n</code></pre> <p>Cette approche permet d'\u00e9crire les conditions suivantes de mani\u00e8re plus explicite :</p> <p></p><pre><code>cellule != 0\ncellule == 1\n</code></pre> devient <pre><code>cellule != VIDE\ncellule == BLEU\n</code></pre> <p>En attribuant des noms significatifs aux constantes, le code devient plus clair et la logique sous-jacente est plus facilement compr\u00e9hensible.</p> <ul> <li> <p>\u00c9crire une fonction <code>afficher_grille</code> qui prend en param\u00e8tre une grille et l'affiche joliment dans la console.</p> <pre><code>grille = [[2, 0, 2, 0, 2, 2],\n          [2, 2, 2, 0, 0, 2],\n          [2, 2, 0, 1, 1, 0],\n          [2, 2, 0, 1, 1, 0],\n          [0, 0, 1, 1, 1, 1],\n          [0, 2, 0, 1, 0, 0]]\n\nafficher_grille(grille)\n</code></pre> Sortie<pre><code>R \u00b7 R \u00b7 R R\nR R R \u00b7 \u00b7 R\nR R \u00b7 B B \u00b7\nR R \u00b7 B B \u00b7\n\u00b7 \u00b7 B B B B\n\u00b7 R \u00b7 B \u00b7 \u00b7\n</code></pre> <p></p>Alternative<pre><code>\ud83d\udc31\ud83c\udf32\ud83d\udc31\ud83c\udf32\ud83d\udc31\ud83d\udc31\n\ud83d\udc31\ud83d\udc31\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83d\udc31\n\ud83d\udc31\ud83d\udc31\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83c\udf32\n\ud83d\udc31\ud83d\udc31\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83c\udf32\n\ud83c\udf32\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83d\udc26\ud83d\udc26\n\ud83c\udf32\ud83d\udc31\ud83c\udf32\ud83d\udc26\ud83c\udf32\ud83c\udf32\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>grille_al\u00e9atoire</code> qui prend en param\u00e8tre un entier \\(n\\) et g\u00e9n\u00e8re une grille de taille \\(n \\times n\\) remplie al\u00e9atoirement de cellules vides, d'agents rouges et bleues.</p> <pre><code>from random import randint\n\ndef grille_al\u00e9atoire(n: int) -&gt; list[list[int]]:\n</code></pre> <pre><code>grille = grille_al\u00e9atoire(6)\nafficher_grille(grille)\n</code></pre> <p></p>Sortie<pre><code>\ud83c\udf32\ud83d\udc31\ud83d\udc31\ud83d\udc26\ud83c\udf32\ud83d\udc31\n\ud83c\udf32\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83d\udc31\ud83d\udc31\n\ud83d\udc31\ud83d\udc26\ud83d\udc26\ud83d\udc26\ud83c\udf32\ud83d\udc31\n\ud83d\udc31\ud83d\udc26\ud83d\udc26\ud83d\udc26\ud83d\udc31\ud83d\udc26\n\ud83c\udf32\ud83c\udf32\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83c\udf32\n\ud83c\udf32\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83d\udc26\ud83d\udc31\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>cellules_adjacentes</code> qui prend en param\u00e8tres une grille et les coordonn\u00e9es \\((x, y)\\) d'une cellule et renvoie, dans une liste, les cellules adjacentes \u00e0 cette cellule.</p> <pre><code>def cellules_adjacentes(grille, x: int, y: int) -&gt; list[int]:\n</code></pre> <pre><code>grille = [[1, 2, 1, 2, 2, 2],\n          [0, 1, 2, 0, 0, 0],\n          [1, 1, 2, 0, 1, 2],\n          [1, 1, 2, 1, 1, 1],\n          [2, 0, 0, 1, 1, 2],\n          [1, 1, 0, 0, 2, 0]]\n\nprint(cellules_adjacentes(grille, 1, 1))\nprint(cellules_adjacentes(grille, 5, 5))\n</code></pre> <p></p>Sortie<pre><code>[1, 2, 1, 0, 2, 1, 1, 2]\n[1, 2, 2, 2, 1, 2, 2, 1]\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>compter_voisins</code> qui prend en param\u00e8tres une grille et les coordonn\u00e9es \\((x, y)\\) d'une cellule et renvoie le nombre de cellules vides, rouges et bleues adjacentes \u00e0 cette cellule.</p> <pre><code>def compter_voisins(grille, x: int, y: int) -&gt; list[int]:\n</code></pre> <pre><code>grille = [[1, 2, 1, 2, 2, 2],\n          [0, 1, 2, 0, 0, 0],\n          [1, 1, 2, 0, 1, 2],\n          [1, 1, 2, 1, 1, 1],\n          [2, 0, 0, 1, 1, 2],\n          [1, 1, 0, 0, 2, 0]]\n\nprint(compter_voisins(grille, 1, 1))\nprint(compter_voisins(grille, 5, 5))\n</code></pre> <p></p>Sortie<pre><code>[1, 4, 3]\n[0, 3, 5]\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>cellules_vides</code> qui prend en param\u00e8tre une grille et renvoie sous la forme d'une liste de tuples, les indices de toutes les cellules vides de la grille.</p> <pre><code>def cellules_vides(grille) -&gt; list[tuple[int, int]]:\n</code></pre> <pre><code>grille = [[1, 2, 1, 2, 2, 2],\n          [0, 1, 2, 0, 0, 0],\n          [1, 1, 2, 0, 1, 2],\n          [1, 1, 2, 1, 1, 1],\n          [2, 0, 0, 1, 1, 2],\n          [1, 1, 0, 0, 2, 0]]\n\nprint(cellules_vides(grille))\n</code></pre> <p></p>Sortie<pre><code>[(1, 0), (1, 3), (1, 4), (1, 5), (2, 3),\n (4, 1), (4, 2), (5, 2), (5, 3), (5, 5)] \n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>remplir</code> qui prend en param\u00e8tres une grille, une liste d'indices, et une valeur, et assigne la valeur sp\u00e9cifi\u00e9e \u00e0 toutes les cellules correspondantes aux indices fournis.</p> <pre><code>def remplir(grille, indices: list[tuple[int, int]], valeur: int) -&gt; None:\n</code></pre> <pre><code>grille = [[1, 2, 1, 2, 2, 2],\n          [0, 1, 2, 0, 0, 0],\n          [1, 1, 2, 0, 1, 2],\n          [1, 1, 2, 1, 1, 1],\n          [2, 0, 0, 1, 1, 2],\n          [1, 1, 0, 0, 2, 0]]\n\nafficher_grille(grille)\nremplir(grille, [(0, 0), (1, 1), (2, 2)], VIDE)\nafficher_grille(grille)\n</code></pre> <p></p>Sortie<pre><code>\ud83d\udc26\ud83d\udc31\ud83d\udc26\ud83d\udc31\ud83d\udc31\ud83d\udc31\n\ud83c\udf32\ud83d\udc26\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83c\udf32\n\ud83d\udc26\ud83d\udc26\ud83d\udc31\ud83c\udf32\ud83d\udc26\ud83d\udc31\n\ud83d\udc26\ud83d\udc26\ud83d\udc31\ud83d\udc26\ud83d\udc26\ud83d\udc26\n\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83d\udc31\n\ud83d\udc26\ud83d\udc26\ud83c\udf32\ud83c\udf32\ud83d\udc31\ud83c\udf32\n\n\ud83c\udf32\ud83d\udc31\ud83d\udc26\ud83d\udc31\ud83d\udc31\ud83d\udc31\n\ud83c\udf32\ud83c\udf32\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83c\udf32\n\ud83d\udc26\ud83d\udc26\ud83c\udf32\ud83c\udf32\ud83d\udc26\ud83d\udc31\n\ud83d\udc26\ud83d\udc26\ud83d\udc31\ud83d\udc26\ud83d\udc26\ud83d\udc26\n\ud83d\udc31\ud83c\udf32\ud83c\udf32\ud83d\udc26\ud83d\udc26\ud83d\udc31\n\ud83d\udc26\ud83d\udc26\ud83c\udf32\ud83c\udf32\ud83d\udc31\ud83c\udf32\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>r\u00e9partir_al\u00e9atoirement</code> qui prend en param\u00e8tres une grille et deux entiers \\(n_{b}\\) et \\(n_{r}\\) et r\u00e9partie al\u00e9atoirement \\(n_b\\) agents bleus et \\(n_r\\) agents rouges sur les cellules vides de la grille.</p> <pre><code>from random import shuffle\n\ndef r\u00e9partir_al\u00e9atoirement(grille, nb_bleu: int, nb_rouge: int) -&gt; None:\n</code></pre> Indications <p>Cette fonction s'\u00e9crit facilement en utilisant les fonctions <code>cellules_vides</code> et <code>remplir</code> pr\u00e9c\u00e9demment cod\u00e9es. <code>random.shuffle</code> permettra de m\u00e9langer la liste des indices des cellules vides. </p> </li> <li> <p>\u00c9crire une fonction <code>actualiser</code> qui prend en param\u00e8tres une grille et un seuil de satisfaction et proc\u00e8de \u00e0 une it\u00e9ration du mod\u00e8le de Schelling.</p> <pre><code>def actualiser(grille, seuil_satisfaction: float) -&gt; None:\n</code></pre> </li> <li> <p>Finalement, \u00e9crire la fonction <code>simuler_console</code> qui prend en param\u00e8tre un entier \\(n\\) et un seuil de satisfaction et simule le mod\u00e8le de Schelling \u00e0 partir d'une grille de taille \\(n \\times n\\) al\u00e9atoire.</p> <pre><code>def simuler_console(n: int, seuil_satisfaction: float) -&gt; None:\n</code></pre> </li> </ul>"},{"location":"D%C3%A9fis/1schelling/#affichage-de-la-grille-avec-pyxel","title":"Affichage de la grille avec Pyxel","text":""},{"location":"D%C3%A9fis/1schelling/#analyse-du-modele","title":"Analyse du mod\u00e8le","text":"<ol> <li> <p>Pourquoi \u00e0 partir d'un certain seuil de satisfaction, la situation ne se stabilise plus ?</p> </li> <li> <p>Pourquoi peut-on dire qu'en dessous d'un seuil de satisfaction de 50%, les individus ne souhaitent pas v\u00e9ritablement une s\u00e9gr\u00e9gation ?</p> </li> <li> <p>En illustrant votre r\u00e9ponse, justifier qu'une s\u00e9gr\u00e9gation spatiale a pourtant lieu en dessous de ce seuil de satisfaction de 50%.</p> </li> <li> <p>La conclusion de Schelling \u00ab Une forte s\u00e9gr\u00e9gation spatiale peut \u00eatre le r\u00e9sultat collectif de pr\u00e9f\u00e9rences individuelles qui ne visent pas, elles, \u00e0 une telle s\u00e9gr\u00e9gation. \u00bb est-elle justifi\u00e9e ?</p> </li> </ol>"},{"location":"D%C3%A9fis/1schelling/#aller-plus-loin","title":"Aller plus loin","text":"<ul> <li> <p>Gr\u00e2ce \u00e0 la biblioth\u00e8que Matplotlib, tracer le nombre d'it\u00e9rations n\u00e9cessaires pour stabiliser la situation en fonction du seuil de satisfaction.</p> </li> <li> <p>Ajouter une troisi\u00e8me couleur d'agents, ou plus.</p> </li> <li> <p>Consid\u00e9rer d'autres types de voisinage.</p> </li> </ul>"},{"location":"D%C3%A9fis/1schelling/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li> <p>Schelling's model of segregation </p> </li> <li> <p>Retour critique sur le mod\u00e8le de s\u00e9gr\u00e9gation urbaine de Schelling </p> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/","title":"Feuille de triche","text":""},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#feuille-de-triche","title":"Feuille de triche","text":"<p>R\u00e9visions 1\u00e8re NSI sur Capytale</p> <ul> <li> R\u00e9vision sur les listes</li> <li> R\u00e9vision sur les tuples et les dictionnaires</li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#types-et-valeurs","title":"Types et Valeurs","text":"<p>Un programme manipule des valeurs. Chaque valeur appartient \u00e0 un type particulier.</p> Principaux types Type Terme anglais Signification Exemples de valeur <code>int</code> integer Nombre entier <code>45</code> <code>-255</code> <code>1998</code> <code>float</code> float Nombre d\u00e9cimal (ou flottant) <code>3.1412</code> <code>-1.14152</code> <code>str</code> string Cha\u00eene de caract\u00e8res (texte) <code>\"Bonjour\"</code> <code>\"42\"</code> <code>bool</code> boolean Bool\u00e9en <code>True</code> <code>False</code> Conversion entre types <p>Pour passer d'un type \u00e0 l'autre, on utilise les fonctions <code>int</code>, <code>float</code>, <code>str</code> ou <code>bool</code>.</p> <pre><code>&gt;&gt;&gt; int(17.6)  # float \u25ba int\n17\n&gt;&gt;&gt; int(\"42\")  # str   \u25ba int\n42\n&gt;&gt;&gt; str(3.14)  # float \u25ba str\n\"3.14\"\n</code></pre>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#variables","title":"Variables","text":"<p>Une variable stocke une valeur et est identifi\u00e9e par un nom. Lors de l\u2019\u00e9valuation d\u2019une expression, le nom d\u2019une variable est alors substitu\u00e9 par sa valeur actuelle.</p> <pre><code>toto = 42  # affectation (initialisation)\ntoto = 56  # une nouvelle affectation \u00e9crase l'ancienne valeur\nprint(toto + 3)  # substitution, affiche 59\n</code></pre> <p>On parle d'initialisation lors de la premi\u00e8re affectation. Le symbole <code>=</code> est l'op\u00e9rateur d'affectation.</p> Op\u00e9rateurs arithm\u00e9tiques Op\u00e9rateur arithm\u00e9tique Signification Exemple R\u00e9sultat <code>+</code> Addition <code>10 + 3</code> <code>13</code> <code>-</code> Soustraction <code>42 - 10.5</code> <code>31.5</code> <code>*</code> Multiplication <code>7 * 8</code> <code>56</code> <code>/</code> Division <code>13 / 5</code> <code>2.6</code> <code>//</code> Division enti\u00e8re <code>13 // 5</code> <code>2</code> <code>%</code> Reste dans la division enti\u00e8re (ou modulo) <code>13 % 5</code> <code>3</code> <code>**</code> Puissance <code>4 ** 3</code> <code>64</code> <p>Les calculs suivent la priorit\u00e9 usuelle des op\u00e9rateurs.</p> Syntaxe abr\u00e9g\u00e9e<pre><code>x += 10  # \u00e9quivalent \u00e0 x = x + 10\nx *= 2   # \u00e9quivalent \u00e0 x = x * 2\nx //= 2  # \u00e9quivalent \u00e0 x = x // 2\n# etc.\n</code></pre> <p>Les op\u00e9rateurs arithm\u00e9tiques ont un sens diff\u00e9rent suivant les types des valeurs manipul\u00e9es :</p> <pre><code>\"Oui\" + \"Non\"  # concat\u00e9nation, renvoie \"OuiNon\"\n\"Oui\" * 3  # renvoie \"OuiOuiOui\"\n</code></pre> <p>C'est tout l'int\u00e9r\u00eat d'avoir diff\u00e9rents types, la machine les traite diff\u00e9remment.</p>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#sortie-entree","title":"Sortie / Entr\u00e9e","text":"<ul> <li> <p>La fonction <code>print</code> permet d'afficher une ou plusieurs valeurs.</p> <pre><code>pr\u00e9nom = \"Arthur\"\n\u00e2ge = 27\nprint(pr\u00e9nom, \"a exactement \", \u00e2ge, \"ans\")\n</code></pre> </li> <li> <p>La fonction <code>input</code> r\u00e9cup\u00e8re une saisie utilisateur au clavier. Elle renvoie une cha\u00eene de caract\u00e8res.</p> <pre><code>saisie = input(\"Rayon ?\")  # input renvoie une cha\u00eene de caract\u00e8res\nrayon = float(saisie) # conversion vers un nombre d\u00e9cimal\naire = 3.14 * rayon * rayon\nprint(\"Aire du disque: \", rayon)\n</code></pre> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#conditions","title":"Conditions","text":"<p>Les structures conditionnelles permettent d'ex\u00e9cuter des blocs de code sp\u00e9cifiques suivant le r\u00e9sultat d'une condition.</p> Op\u00e9rateurs de comparaison et d'appartenance <p>Ces op\u00e9rateurs renvoient un bool\u00e9en : <code>True</code> ou <code>False</code>.</p> Op\u00e9rateurs de comparaison Signification Exemple R\u00e9sultat <code>==</code> \u00e9gal \u00e0 <code>1 == 1</code> <code>True</code> <code>!=</code> diff\u00e9rent de <code>1 != 1</code> <code>False</code> <code>&gt;</code> sup\u00e9rieur \u00e0 <code>2 &gt; 0</code> <code>True</code> <code>&gt;=</code> sup\u00e9rieur ou \u00e9gal \u00e0 <code>4 &gt;= 6</code> <code>False</code> <code>&lt;</code> inf\u00e9rieur \u00e0 <code>5 &lt; 5</code> <code>False</code> <code>&lt;=</code> inf\u00e9rieur ou \u00e9gal \u00e0 <code>5 &lt;= 5</code> <code>True</code> Op\u00e9rateur d'appartenance Signification Exemple R\u00e9sultat <code>\u00e9l\u00e9ment in it\u00e9rable</code> <code>\u00e9l\u00e9ment</code> est dans <code>it\u00e9rable</code> <code>\"t\" in \"chat\"</code> <code>True</code> Op\u00e9rateurs logiques <p>Les op\u00e9rateurs logiques permettent de combiner des conditions. Ils fonctionnent entre deux bool\u00e9ens.</p> Op\u00e9rateurs logiques Signification Exemple R\u00e9sultat <code>not</code> non logique <code>not True</code> <code>False</code> <code>and</code> et logique <code>False and True</code> <code>False</code> <code>or</code> ou logique <code>False or True</code> <code>True</code> <code>if</code> <code>if else</code> <code>if elif else</code> Exemple d'une structure conditionnelle<pre><code>note = int(input(\"Saisissez votre note au bac :\"))\nprint(\"Votre mention est :\")\n\nif note &gt;= 16:\n    print(\"F\u00e9licitations\")\nelif note &gt;= 14:\n    print(\"Bien\")\nelif note &gt;= 12:\n    print(\"Assez Bien\")\nelse:\n    print(\"Pas de mention\")\n</code></pre>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#boucles","title":"Boucles","text":"<p>Une boucle est une structure de contr\u00f4le de flot qui permet de r\u00e9p\u00e9ter un bloc de code.</p>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#boucle-non-bornee-while","title":"Boucle non-born\u00e9e <code>while</code>","text":"<p>Lorsque le nombre de r\u00e9p\u00e9titions n'est pas connu \u00e0 l'avance, la boucle <code>while</code> permet de r\u00e9p\u00e9ter un bloc d'instructions tant qu'une condition est v\u00e9rifi\u00e9e.</p> <p></p> Combien de fois faut-il plier une feuille pour que son \u00e9paisseur d\u00e9passe la Tour Eiffel ?<pre><code>epaisseur = 0.0001\nnombre_pliages = 0\n\nwhile epaisseur &lt; 324: \n    epaisseur = 2 * epaisseur\n    nombre_pliages += 1\n\nprint(\"Il faut\", nombre_pliages, \"pliages.\")\n</code></pre>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#boucle-bornee-for","title":"Boucle born\u00e9e <code>for</code>","text":"<p>La boucle <code>for</code> parcourt un it\u00e9rable, c'est-\u00e0-dire une structure de donn\u00e9es qui peut \u00eatre d\u00e9compos\u00e9e en une s\u00e9quence d'\u00e9l\u00e9ments.</p> <p></p> <p>On dit que la variable <code>\u00e9l\u00e9ment</code> parcourt <code>it\u00e9rable</code>, elle va capturer chaque \u00e9l\u00e9ment de l'it\u00e9rable \u00e0 chaque tour de boucle.</p> Exemple de parcours de plusieurs it\u00e9rables<pre><code>for caractere in \"bonjour\":\n    print(caractere)\n\nfor i in range(5):\n    print(i)\n\nfor elem in [1, 5, 17]:\n    print(elem)\n</code></pre> G\u00e9n\u00e9rer une s\u00e9quence d'entiers avec <code>range</code> <p> </p>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#fonctions","title":"Fonctions","text":"<pre><code># d\u00e9finition d'une fonction\ndef double(nombre):  # nombre est un param\u00e8tre / argument\n    return nombre * 2  # return permet de renvoyer une valeur\n\nr\u00e9sultat = double(21)  # appel de la fonction \nprint(r\u00e9sultat)  # affiche 42\n</code></pre>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#conteneurs","title":"Conteneurs","text":""},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#tableau-list","title":"Tableau <code>list</code>","text":"<ul> <li> <p>Op\u00e9rations de base :</p> <pre><code>tab = [3, 4, 58, 10, 2]\n\n# Acc\u00e8s \u00e0 un \u00e9l\u00e9ment gr\u00e2ce \u00e0 son indice\nprint(tab[2]) # (lecture) affiche 58\ntab[2] = 999  # (\u00e9criture) tab vaut [3, 4, 999, 10, 2]\n\n# Taille d'une liste\nprint(len(tab))  # affiche 5\n\n# Ajouter/retirer un \u00e9l\u00e9ment\ntab.append(42) # tab vaut [3, 4, 999, 10, 2, 42]\ntab.remove(10) # tab vaut [3, 4, 999, 2, 42]\n</code></pre> </li> <li> <p>Cr\u00e9er un tableau :     </p><pre><code># Cr\u00e9ation explicite\ntab = [3, 4, 58, 10, 2]\n\n# Cr\u00e9ation \u00e0 partir d'un \u00e9l\u00e9ment\ntab = ['chat'] * 5  # ['chat', 'chat', 'chat', 'chat', 'chat']\n\n# Cr\u00e9ation \u00e0 partir d'un autre it\u00e9rable\ntab = list(range(6))  # tab vaut [0, 1, 2, 3, 4, 5]\ntab = list(\"salut\")   # tab vaut ['s', 'a', 'l', 'u', 't']\n\n# Cr\u00e9ation \u00e0 partir d'une liste vide\ntab = []  # liste vide\nfor i in range(5):\n    tab.append(i * i)\n# tab vaut [0, 1, 4, 9, 16]\n\n# Liste en compr\u00e9hensions\ntab = [i * i for i in range(5)]  # tab vaut [0, 1, 4, 9, 16]\ntab_pair = [n for n in tab if n % 2 == 0]  # (filtre) tab_pair vaut [0, 4, 16] \n</code></pre> </li> <li> <p>Parcourir un tableau :</p> <pre><code>for \u00e9l\u00e9ment in tab:  # parcours par \u00e9l\u00e9ment\n    print(\u00e9l\u00e9ment)\n\nfor i in range(len(tab)):  # parcours par indice\n    print(tab[i])\n</code></pre> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#dictionnaire-dict","title":"Dictionnaire <code>dict</code>","text":"<pre><code># Construction explicite d'un dictionnaire :\neleve = {\n    \"pr\u00e9nom\": \"Michel\",\n    \"nom\": \"Dupont\",\n    \"\u00e2ge\": 17,\n    \"taille\": 175\n}\n\n# On acc\u00e8de \u00e0 une valeur, gr\u00e2ce \u00e0 sa cl\u00e9 :\nprint(eleve[\"pr\u00e9nom\"])\n\n# Modification d'une valeur :\neleve[\"age\"] = 42\n\n# Suppression d'une association :\neleve.pop(\"taille\") # (note : ici, la m\u00e9thode .pop renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9, donc 175)\n\nprint(eleve.keys()) # ensemble des cl\u00e9s\nprint(eleve.values()) # ensemble des valeurs\nprint(eleve.items()) # ensemble des cl\u00e9s-valeurs\n\n# parcours par cl\u00e9 \nfor cl\u00e9 in eleve:\n\u00a0 \u00a0 print(cl\u00e9, eleve[cl\u00e9])\n\n# parcours par valeurs\nfor valeur in eleve.values():\n\u00a0 \u00a0 print(valeur)\n\n# parcours par cl\u00e9 et valeurs\nfor cl\u00e9, valeur in eleve.items():\n\u00a0 \u00a0 print(cl\u00e9, valeur)\n</code></pre>"},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#bibliotheques","title":"Biblioth\u00e8ques","text":""},{"location":"R%C3%A9visions%201%C3%A8re/0triche/#complements","title":"Compl\u00e9ments","text":""},{"location":"R%C3%A9visions%201%C3%A8re/1algorithmique/","title":"Algorithmique","text":""},{"location":"R%C3%A9visions%201%C3%A8re/1algorithmique/#algorithmique","title":"Algorithmique","text":"<p>Liens Capytale</p> <ul> <li>TP Complexit\u00e9 :  Notebook Capytale ea45-2018471</li> <li>TP Algorithme de tri :  Notebook Capytale 65d4-2018551</li> <li>TP Recherche dichotomique :  Notebook Capytale d7ca-1776728</li> <li>Correction : Disponible plus tard.</li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/","title":"Tableaux \u00e0 deux dimensions","text":""},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#tableaux-a-deux-dimensions","title":"Tableaux \u00e0 deux dimensions","text":""},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#rappels","title":"Rappels","text":"<p>Ainsi si on \u00e9crit <code>tab[i][j]</code>, on s\u00e9lectionne l'\u00e9l\u00e9ment \u00e0 la ligne <code>i</code> et \u00e0 la colonne <code>j</code>.</p> <p>Soit <code>matrice</code> un tableau \u00e0 deux dimensions, on peut parcourir ses \u00e9l\u00e9ments de deux mani\u00e8res :</p> <ul> <li> <p>Parcours par \u00e9l\u00e9ments :</p> <pre><code>for ligne in tab:\n  for \u00e9l\u00e9ment in ligne:\n      print(\u00e9l\u00e9ment)\n</code></pre> </li> <li> <p>Parcours par indices :</p> <pre><code>for i in range(len(matrice)):\n    for j in range(len(matrice[i])):\n        print(tab[i][j])\n</code></pre> <p>Si <code>len(matrice)</code> correspond aux nombres de lignes, <code>len(matrice[i])</code> correspond aux nombres d'\u00e9l\u00e9ments de la ligne <code>matrice[i]</code>.</p> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#projet-un-jeu-de-la-vie","title":"Projet : Un jeu de la vie","text":"<p>Le Jeu de la Vie n'est pas vraiment un jeu. Il s'agit d'un automate cellulaire fascinant qui simule l'\u00e9volution d'un groupe de cellules sur une grille. Chaque cellule peut \u00eatre soit vivante, soit morte et son \u00e9tat \u00e9volue en fonction de r\u00e8gles simples. L'objectif est de programmer cet automate cellulaire et d'afficher son \u00e9volution :</p> <p></p> <p>Dans cette animation, que vous allez recr\u00e9er, une cellule vivante est blanche, et une cellule morte noire. Pour passer d'une it\u00e9ration \u00e0 la suivante, on suit les r\u00e8gles suivantes.</p>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#regles","title":"R\u00e8gles","text":"<p>Une cellule poss\u00e8de huit cellules adjacentes voisines :</p> <p></p> <p>\u00c0 chaque it\u00e9ration, l'\u00e9tat d\u2019une cellule est enti\u00e8rement d\u00e9termin\u00e9e par l\u2019\u00e9tat de ses huit cellules voisines, selon les r\u00e8gles suivantes :</p> <ul> <li>Une cellule morte devient vivante si elle poss\u00e8de exactement 3 cellules voisines vivantes.</li> <li>Une cellule vivante reste vivante si elle poss\u00e8de 2 ou 3 cellules voisines vivantes, sinon elle meurt.</li> </ul> <p>Par exemple la configuration suivante devient :</p> <p></p> <p>La transition entre les deux configurations est plus compr\u00e9hensible en faisant appara\u00eetre le nombre de cellules vivantes voisines pour chaque cellule :</p> <p></p>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#demarche","title":"D\u00e9marche","text":"<ul> <li> <p>Une cellule est soit vivante, soit morte. Quel type est adapt\u00e9 pour repr\u00e9senter l'\u00e9tat d'une cellule ?</p> </li> <li> <p>Comment repr\u00e9senter la grille des cellules en Python ?</p> </li> </ul> <p>Pour la suite, on suppose que la grille des cellules du Jeu de la Vie est carr\u00e9e. Dans un script Python <code>jeudelavie.py</code> ouvert dans Thonny, ajouter au fur et \u00e0 mesure les fonctions suivantes :</p> <ul> <li> <p>Pour vous aider \u00e0 d\u00e9boguer par la suite, \u00e9crire la fonction <code>afficher_matrice</code> qui prend en param\u00e8tre un tableau \u00e0 deux dimensions et affiche correctement son contenu :</p> <pre><code>def afficher_matrice(matrice):\n    \"\"\" Affiche la matrice donn\u00e9e en param\u00e8tre. \"\"\"\n    # code \u00e0 compl\u00e9ter\n</code></pre> <pre><code>&gt;&gt;&gt; afficher_matrice([[3, 5, 2], [7, 1, 4], [8, 6, 9]])\n3 5 2\n7 1 4\n8 6 9\n</code></pre> Mais print renvoie \u00e0 la ligne automatiquement ! <p>Soit vous construisez une grande cha\u00eene de caract\u00e8res avant de l'afficher (<code>'\\n'</code> correspond \u00e0 un saut de ligne), soit vous pouvez afficher it\u00e9rativement les \u00e9l\u00e9ments avec <code>print(\u00e9l\u00e9ment, end=' ')</code>, le param\u00e8tre cach\u00e9 <code>end</code> vaut par d\u00e9faut <code>'\\n'</code>.</p> </li> <li> <p>\u00c9crire la fonction <code>afficher_cellules</code> qui prend en param\u00e8tre une grille carr\u00e9e de cellules et l'affiche \u00ab joliment \u00bb : par exemple, une cellule vivante sera repr\u00e9sent\u00e9e par le caract\u00e8re <code>'\u25a0'</code>, et une cellule morte par le caract\u00e8re <code>'\u00b7'</code>.</p> <pre><code>def afficher_cellules(grille):\n    \"\"\" Affiche la grille de cellules donn\u00e9e en param\u00e8tre. \"\"\"\n    # code \u00e0 compl\u00e9ter\n</code></pre> <pre><code>&gt;&gt;&gt; afficher_cellules([[0, 1, 0], [0, 1, 0], [1, 0, 0]])\n\u00b7 \u25a0 \u00b7\n\u00b7 \u25a0 \u00b7\n\u25a0 \u00b7 \u00b7\n</code></pre> </li> <li> <p>\u00c9crire la fonction <code>calculer_voisins</code> qui prend en param\u00e8tre une carr\u00e9e de cellules et renvoie la matrice des voisins.</p> <pre><code>def calculer_voisins(grille):\n    \"\"\" Calcule la matrice des voisins de la grille de cellules donn\u00e9e en param\u00e8tre. \"\"\"\n\n    n = len(grille)  # on suppose la grille carr\u00e9e\n    voisins = [[0] * n for _ in range(n)]\n\n    # code \u00e0 compl\u00e9ter\n\n    return voisins\n</code></pre> <p>Par exemple, en reprenant l'exemple pr\u00e9c\u00e9dent :</p> <p></p> <pre><code>cellules = [[0, 0, 0, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 0, 0, 0]]\n\nvoisins = calculer_voisins(cellules)\nafficher_matrice(voisins)\n</code></pre> <p></p>Sortie<pre><code>0 1 1 1 0\n0 2 1 2 0\n0 3 2 3 0\n0 2 1 2 0\n0 1 1 1 0\n</code></pre> <p>Les cellules sur les bords risquent de poser quelques probl\u00e8mes. Une solution est consid\u00e9rer des bords finis :</p> <p></p> <pre><code>cellules = [[1, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 0],\n            [0, 1, 0, 0, 0]]\n\nvoisins = calculer_voisins(cellules)\nafficher_matrice(voisins)\n</code></pre> <p></p>Sortie<pre><code>0 1 0 0 0\n1 1 0 1 1\n0 0 0 1 0\n1 1 1 1 1\n1 0 1 0 0\n</code></pre> <p>Une autre solution \u00e0 la \u00ab Pac-Man \u00bb serait de consid\u00e9rer une grille dont les bords oppos\u00e9s sont adjacents.</p> </li> <li> <p>\u00c9crire une fonction <code>grille_suivante</code> qui prend en param\u00e8tre une grille de cellules et renvoie la prochaine grille suivant les r\u00e8gles du Jeu de la Vie.</p> <pre><code>def grille_suivante(grille):\n    \"\"\" Renvoie la prochaine grille de cellules apr\u00e8s une it\u00e9ration. \"\"\"\n\n    voisins = calculer_voisins(grille)\n    n = len(grille)\n    grille_suivante = [[0] * n for _ in range(n)]\n\n    # code \u00e0 compl\u00e9ter\n\n    return grille_suivante\n</code></pre> <p></p> <pre><code>cellules = [[0, 0, 0, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 0, 0, 0]]\n\ncellules = grille_suivante(cellules)\nafficher_cellules(cellules)\n</code></pre> <p></p>Sortie<pre><code>\u00b7 \u00b7 \u00b7 \u00b7 \u00b7\n\u00b7 \u00b7 \u00b7 \u00b7 \u00b7\n\u00b7 \u25a0 \u25a0 \u25a0 \u00b7\n\u00b7 \u00b7 \u00b7 \u00b7 \u00b7\n\u00b7 \u00b7 \u00b7 \u00b7 \u00b7\n</code></pre> </li> <li> <p>\u00c9crire la fonction <code>grille_al\u00e9atoire</code> qui prend en entr\u00e9e un entier \\(n\\) et renvoie une grille de taille \\(n \\times n\\) dont les cellules sont initialis\u00e9es de mani\u00e8re al\u00e9atoire, c'est-\u00e0-dire que chaque cellule a une probabilit\u00e9 \u00e9gale d'\u00eatre vivante ou morte. Ne pas oublier la fonction <code>randint</code> de la biblioth\u00e8que <code>random</code> !</p> <pre><code>import random\n\ndef grille_al\u00e9atoire(n):\n    \"\"\" G\u00e9n\u00e8re une grille du Jeu de la Vie al\u00e9atoire de taille n \u00d7 n. \"\"\"\n    # code \u00e0 compl\u00e9ter\n</code></pre> </li> <li> <p>Finalement, \u00e9crire la fonction <code>simuler</code> qui prend en entr\u00e9e une grille de cellules initiale et simule le Jeu de la Vie.</p> <pre><code>def simuler(grille):\n    \"\"\" Simule le Jeu de la Vie \u00e0 partir de la grille de cellules donn\u00e9e en param\u00e8tre. \"\"\"\n    continuer = True\n    while continuer:\n\n        # code \u00e0 compl\u00e9ter\n\n        saisie = input('Continuer ? ')\n        if saisie = 'stop':\n            continuer = False\n</code></pre> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#a-bas-la-console","title":"\u00c0 bas la console !","text":"<p>Actuellement, notre simulation est visuellement rudimentaire. Soyons honn\u00eates, elle est m\u00eame plut\u00f4t laide. Afin d'am\u00e9liorer l'aspect de cette simulation, on se propose alors d'afficher la simulation du Jeu de la Vie au sein d'une fen\u00eatre graphique. Pour ce faire, on utilisera la biblioth\u00e8que <code>pyxel</code>.</p> Installer la biblioth\u00e8que pyxel dans Thonny <p>Dans Thonny, dans la barre d'outils, <code>Outils</code> <code>G\u00e9rer les paquets</code>. Dans la barre de recherche, saisir <code>Pyxel</code> et cliquer sur <code>Rechercher sur PyPI</code>. Dans la liste des r\u00e9sultats, cliquer sur <code>pyxel</code>, puis <code>Installer</code>.</p> <p>Une fois l'installation faites, assurez-vous que tout fonctionne en ex\u00e9cutant le code suivant :</p> <pre><code>import time\nimport pyxel\nimport random\n\nn = 50\npyxel.init(n, n)  # d\u00e9finit une fen\u00eatre de n \u00d7 n pixels\n\nwhile True:\n    pyxel.cls(0)  # efface l'\u00e9cran et remplit le fond avec la couleur 0 (noir)\n    x = random.randint(0, n)\n    y = random.randint(0, n)\n    pyxel.pset(x, y, 7)  # change la couleur du pixel (x, y) \u00e0 7 (blanc)\n    pyxel.flip()  # rafra\u00eechit la fen\u00eatre\n    time.sleep(0.5)  # on patiente 0.5 secondes\n</code></pre> <ul> <li> <p>Comment changer la couleur du fond de la fen\u00eatre et du pixel ? La documention de Pyxel \u00e0 consulter.</p> </li> <li> <p>\u00c9crire la fonction <code>simuler_pyxel</code> qui simulera le Jeu de la Vie \u00e0 partir d'une grille donn\u00e9e en param\u00e8tre et la fonction <code>dessiner_cellules</code> qui dessinera la grille des cellules (elle remplacera <code>afficher_cellules</code>). Adapter le code pr\u00e9c\u00e9dent, tout s'y trouve ! \ud83d\ude0a</p> </li> </ul>"},{"location":"R%C3%A9visions%201%C3%A8re/2mat/#jen-veux-plus","title":"J'en veux plus !","text":"<ul> <li> <p>Une excellente vid\u00e9o de ScienceEtonnante sur le sujet qui vous permettra d'approfondir le sujet et d\u00e9couvrir d'autres automates cellulaires \u00e0 programmer \u00e0 l'envie.</p> </li> <li> <p>Le Jeu de la Vie dans le Jeu de la Vie \ud83d\ude40</p> </li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/","title":"Programmation Orient\u00e9e Objet","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#programmation-orientee-objet","title":"Programmation Orient\u00e9e Objet","text":"<p>Liens Capytale</p> <ul> <li>Exercices :  Notebook Capytale d7ca-1776728</li> <li>Correction :  Notebook Capytale 4e10-1778758 </li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#preambule","title":"Pr\u00e9ambule","text":"<p>La Programmation Orient\u00e9e Objet (abr\u00e9g\u00e9e POO) est un paradigme de programmation, au m\u00eame titre que la programmation imp\u00e9rative que nous pratiquons d\u00e9j\u00e0 ou la programmation fonctionnelle que nous \u00e9tudierons cette ann\u00e9e. Chaque paradigme de programmation peut \u00eatre consid\u00e9r\u00e9 comme une philosophie, un parti-pris revendiqu\u00e9 dans la mani\u00e8re d'aborder un probl\u00e8me \u00e0 r\u00e9soudre.</p> <p>En optant pour la POO, nous faisons le choix d'organiser et structurer notre code de mani\u00e8re \u00e0 regrouper des donn\u00e9es et des fonctionnalit\u00e9s associ\u00e9es au sein d'entit\u00e9s autonomes appel\u00e9es objets. C'est un outil que tout programmeur doit ma\u00eetriser !</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#un-objet-un-agglomerat-de-valeurs","title":"Un objet ? Un agglom\u00e9rat de valeurs.","text":"<p>Il arrive parfois que certaines valeurs, prises s\u00e9par\u00e9ment, n'aient pas de signification en elles-m\u00eames. Par exemple, un livre peut \u00eatre repr\u00e9sent\u00e9 par plusieurs valeurs : un titre, un auteur, une ann\u00e9e de parution etc. Un exemple de livre concret :</p> <pre><code>titre  = \"L'\u00c9tranger\"\nauteur = \"Albert Camus\"\nann\u00e9e  = 1942\n</code></pre> <p>Or le lien logique entre ces trois valeurs n'appara\u00eet pas dans ce programme, elles sont effectivement ind\u00e9pendantes. La POO propose alors un moyen de regrouper, de lier logiquement, plusieurs valeurs au sein d'une m\u00eame entit\u00e9, un objet. Ces valeurs sont alors appel\u00e9es attributs de l'objet. Ainsi dans l'exemple pr\u00e9c\u00e9dent, on regroupera ces trois valeurs (titre, auteur et ann\u00e9e) dans un m\u00eame objet. On aboutira \u00e0 :</p> <pre><code>un_livre = Livre(\"L'\u00c9tranger\", \"Albert Camus\", 1942) #(1)!\nprint(un_livre.titre)  # affiche \"L'\u00c9tranger\"\nprint(un_livre.ann\u00e9e)  # affiche \"1942\"\n</code></pre> <ol> <li><code>Livre(\"L'\u00c9tranger\", \"Albert Camus\", 1942)</code> cr\u00e9e un nouveau livre.</li> </ol> <p>Au lieu de manipuler trois valeurs s\u00e9par\u00e9ment, on manipulera alors qu'un seul objet. Puisqu'un objet regroupe plusieurs valeurs, un objet peut \u00eatre vu comme une grosse variable, une variable qui contient d'autres variables !</p> <p>Acc\u00e8s \u00e0 un attribut</p> <p>Pour acc\u00e9der \u00e0 un attribut d'un objet, on \u00e9crira <code>objet.attribut</code>.</p> <p>Une classe est le mod\u00e8le g\u00e9n\u00e9ral \u00e0 partir duquel les objets sont cr\u00e9\u00e9s, elle d\u00e9finit notamment les attributs de l'objet. De la m\u00eame mani\u00e8re qu'une valeur est une instance d'un type, un objet est une instance d'une classe. Une classe d\u00e9finit donc un type personnalis\u00e9, il arrive souvent que les notions de classe et de type soient confondues.</p> <p> </p> <p>En Python, la d\u00e9finition de la classe <code>Livre</code> s'\u00e9crira comme :</p> <pre><code>class Livre:  #(1)!\n    def __init__(self, un_titre, un_auteur, une_ann\u00e9e): #(2)!\n        self.titre  = un_titre #(3)!\n        self.auteur = un_auteur\n        self.ann\u00e9e  = une_ann\u00e9e\n</code></pre> <ol> <li> <p>D\u00e9but de la d\u00e9finition de la classe. Il est usuel de commencer le nom d'une classe par une majuscule pour le diff\u00e9rencier d'un nom de variable.</p> </li> <li> <p><code>__init__</code> une fonction sp\u00e9ciale, c'est le constructeur. Pour qu'un utilisateur cr\u00e9e un nouveau livre, il aura besoin de fournir son titre, son auteur et son ann\u00e9e de parution. C'est pr\u00e9cis\u00e9ment la fonction qui est appel\u00e9e lorsque l'expression <code>Livre(\"L'\u00c9tranger\", \"Albert Camus\", 1942)</code> est \u00e9valu\u00e9e.</p> </li> <li> <p><code>self.titre</code> est le premier attribut de l'objet en cours de cr\u00e9ation. On y affecte alors le titre pass\u00e9 en argument au constructeur, \u00e0 savoir <code>un_titre</code>. Le mot-cl\u00e9 <code>self</code> est une r\u00e9f\u00e9rence \u00e0 l'instance courante de la classe (l'objet en cours de cr\u00e9ation ou de manipulation), ce qui vous permet d'acc\u00e9der aux attributs de cette instance.</p> </li> </ol> <p>\u00c0 la suite de cette d\u00e9finition, on pourra alors instancier plusieurs objets (ici des livres) de la classe <code>Livre</code> :</p> <pre><code>livre1 = Livre(\"L'\u00c9tranger\", \"Albert Camus\", 1942)\nlivre2 = Livre(\"Martin Eden\", \"Jack London\", 1909)\nlivre3 = Livre(\"Les Fr\u00e8res Karamazov\", \"Fiodor Dosto\u00efevski\", 1880)\n</code></pre> <p>Visualisation du d\u00e9roulement avec PythonTutor</p> <p>Il est possible de visualiser l\u2019ex\u00e9cution du programme pas-\u00e0-pas gr\u00e2ce \u00e0   PythonTutor. Il est indispensable en programmation de conna\u00eetre exactement le d\u00e9roulement des op\u00e9rations !</p> <p>Code de base d'une classe</p> <p>Une nouvelle classe s'\u00e9crit souvent comme :</p> <pre><code>class NomDeLaClasse:\n    def __init__(self, param\u00e8tre1, param\u00e8tre2, ...):\n        self.attribut1 = ...\n        self.attribut2 = ...\n        ...\n</code></pre> <p>C\u00f4t\u00e9 utilisateur, un objet de cette classe sera instanci\u00e9 comme :</p> <pre><code>mon_objet = NomDeLaClasse(param\u00e8tre1, param\u00e8tre2, ...)\nprint(mon_objet.attribut1)  # acc\u00e8s \u00e0 un attribut\n</code></pre> Similarit\u00e9 avec un dictionnaire <p>Finalement, un objet est une structure de donn\u00e9es plus ou moins similaire \u00e0 un dictionnaire. En effet, il aurait \u00e9t\u00e9 possible de repr\u00e9senter un livre comme :</p> <pre><code>livre1 = {\n    \"titre\": \"L'\u00c9tranger\",\n    \"auteur\": \"Albert Camus\",\n    \"ann\u00e9e\": 1942\n}\n\nprint(livre1[\"titre\"])  # acc\u00e8s similaire \u00e0 un attribut\n</code></pre> <p>Alors pourquoi s'emb\u00eater avec la POO ? Patience, les objets offrent tout un tas de fonctionnalit\u00e9s sp\u00e9cifiques que l'on \u00e9tudiera par la suite.</p> \u00a0\u00a0\u00a0Exercice 1 - Un rat de biblioth\u00e8que <ol> <li> <p>Instancier un nouveau livre <code>mon_livre_favori</code> et afficher ensuite son titre.</p> </li> <li> <p>Le professeur documentaliste souhaite que vos livres prennent en compte la langue originale d'\u00e9criture. Modifiez donc la classe <code>Livre</code> pour inclure un nouvel attribut appel\u00e9 <code>langue_originale</code>. Ensuite, mettez \u00e0 jour l'instantiation des quatre livres pr\u00e9c\u00e9demment cr\u00e9\u00e9s pour inclure \u00e9galement l'information sur la langue originale.</p> </li> <li> <p>\u00c9crire une fonction <code>plus_ancien(livre1, livre2)</code> qui renvoie le titre du livre ayant \u00e9t\u00e9 publi\u00e9 en premier parmi les deux livres pass\u00e9s en argument.</p> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; livre1 = Livre(\"L'\u00c9tranger\", \"Albert Camus\", 1942)\n&gt;&gt;&gt; livre2 = Livre(\"Martin Eden\", \"Jack London\", 1909)\n&gt;&gt;&gt; livre3 = Livre(\"Les Fr\u00e8res Karamazov\", \"Fiodor Dosto\u00efevski\", 1880)\n&gt;&gt;&gt; plus_ancien(livre1, livre3)\n'Les Fr\u00e8res Karamazov'\n</code></pre> </li> </ol> \u00a0\u00a0\u00a0Exercice 2 - Classe et salle de classe <ol> <li> <p>\u00c9crire une classe <code>Eleve</code> contenant les attributs <code>nom</code>, <code>classe</code> et <code>moyenne</code>.</p> </li> <li> <p>Instancier trois \u00e9l\u00e8ves de cette classe de NSI.</p> </li> <li> <p>\u00c9crire une fonction <code>chouchou(eleve1, eleve2)</code> qui renvoie le nom de l'\u00e9l\u00e8ve ayant la meilleure moyenne.</p> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; riri = Eleve(\"Hubert\", \"TG2\", 12)\n&gt;&gt;&gt; fifi = Eleve(\"Louie\", \"TG6\", 15)\n&gt;&gt;&gt; loulou = Eleve(\"Hugues\", \"TG1\", 8)\n&gt;&gt;&gt; chouchou(riri, fifi)\n'Louie'\n</code></pre> </li> </ol> \u00a0\u00a0\u00a0Exercice 3 - Un constructeur plus original <p>\u00c9crire une classe <code>TriangleRectangle</code> qui contiendra les attributs <code>cote1</code>, <code>cote2</code> et <code>hypotenuse</code>. Cependant, le constructeur ne prendra en param\u00e8tres que <code>cote1</code> et <code>cote2</code>, l'attribut <code>hypotenuse</code> se calculera automatiquement.</p> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; mon_triangle = TriangleRectangle(3, 4)\n&gt;&gt;&gt; mon_triangle.cote1\n3\n&gt;&gt;&gt; mon_triangle.cote2\n4\n&gt;&gt;&gt; mon_triangle.hypotenuse\n5.0\n</code></pre> On vous a menti ! <p>En Python, tout est objet. Il n'existe pas de types primitifs comme dans la plupart des langages ! M\u00eame un simple entier est en fait un objet :</p> <pre><code>&gt;&gt;&gt; n = 42\n&gt;&gt;&gt; type(n)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; n.real\n42\n</code></pre> <p>Les cha\u00eenes de caract\u00e8res, les flottants, les listes, les dictionnaires etc. sont tous des objets !</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#un-objet-un-agglomerat-de-valeurs-et-de-fonctions","title":"Un objet ? Un agglom\u00e9rat de valeurs ET de fonctions.","text":"<p>Un objet regroupe des valeurs (attributs) et aussi des fonctions qui agissent sur ces valeurs, et ces fonctions sont appel\u00e9es m\u00e9thodes. Par exemple, d\u00e9finissons une classe <code>Rectangle</code> rudimentaire :</p> <pre><code>class Rectangle:\n    def __init__(self, longueur, largeur):\n        self.longueur = longueur\n        self.largeur  = largeur\n</code></pre> <p>On pourrait alors souhaiter calculer l'aire des rectangles de cette classe, une mani\u00e8re de faire serait de d\u00e9finir une simple fonction :</p> <pre><code>def calculer_aire(rectangle):\n    return rectangle.longueur * rectangle.largeur\n</code></pre> <p>Une fois la classe <code>Rectangle</code> et la fonction <code>calculer_aire</code> d\u00e9finies, l'utilisateur peut les utiliser comme :</p> <pre><code># Cr\u00e9ation d'objets de la classe Rectangle\nrect1 = Rectangle(5, 3)\nrect2 = Rectangle(7, 4)\n\n# Appel de la fonction calculer_aire\naire1 = calculer_aire(rect1)\naire2 = calculer_aire(rect2)\n\n# Affichage des aires calcul\u00e9es\nprint(aire1)\nprint(aire2)\n</code></pre> <p>Une nouvelle mani\u00e8re de faire est de d\u00e9placer la fonction <code>calculer_aire</code> \u00e0 l'int\u00e9rieur de la classe, cette fonction devient alors une m\u00e9thode :</p> <pre><code>class Rectangle:\n    def __init__(self, longueur, largeur):\n        self.longueur = longueur\n        self.largeur  = largeur\n\n    def calculer_aire(self):\n        return self.longueur * self.largeur\n\n\n# Cr\u00e9ation d'objets de la classe Rectangle\nrect1 = Rectangle(5, 3)\nrect2 = Rectangle(7, 4)\n\n# Appel de la m\u00e9thode calculer_aire\naire1 = rect1.calculer_aire()\naire2 = rect2.calculer_aire()\n\n# Affichage des aires calcul\u00e9es\nprint(aire1)\nprint(aire2)\n</code></pre> <p>Appel d'une m\u00e9thode</p> <p>Pour appeler une m\u00e9thode sur un objet, on \u00e9crira <code>objet.m\u00e9thode(arg1, arg2, ...)</code>.</p> <p>Plus de pr\u00e9cision sur <code>self</code></p> <ul> <li> <p>Lorsque <code>calculer_aire(rect1)</code> est \u00e9valu\u00e9, le param\u00e8tre <code>rectangle</code> de la fonction <code>calculer_aire(rectangle)</code> re\u00e7oit une r\u00e9f\u00e9rence \u00e0 l'objet <code>rect1</code>.</p> </li> <li> <p>Exactement de la m\u00eame mani\u00e8re, lorsque <code>rect1.calculer_aire()</code> est \u00e9valu\u00e9, le param\u00e8tre <code>self</code> de la m\u00e9thode <code>calculer_aire(self)</code> re\u00e7oit une r\u00e9f\u00e9rence \u00e0 l'objet <code>rect1</code>.</p> </li> </ul> <p>En d'autres termes, <code>self</code> est une r\u00e9f\u00e9rence \u00e0 l'objet sur lequel la m\u00e9thode est appel\u00e9e.</p> Juste une autre fa\u00e7on d'appeler une fonction ? <p>Finalement, quelle diff\u00e9rence entre <code>rect1.calculer_aire()</code> et <code>calculer_aire(rect1)</code> ? La diff\u00e9rence r\u00e9side dans la fa\u00e7on dont le calcul de l'aire est organis\u00e9 :</p> <ul> <li> <p>En Python, <code>calculer_aire(rectangle)</code> est une fonction ind\u00e9pendante et g\u00e9n\u00e9rale qui prend un objet de n'importe quel type en tant que param\u00e8tre.</p> </li> <li> <p><code>rect1.calculer_aire()</code> est appel\u00e9 en tant que m\u00e9thode de l'objet <code>rect1</code>. Cela signifie que la m\u00e9thode <code>calculer_aire</code> est d\u00e9finie sp\u00e9cifiquement pour les objets de la classe <code>Rectangle</code>. Une nouvelle classe <code>Cercle</code> pourrait alors d\u00e9finir une m\u00e9thode <code>calculer_aire</code> sp\u00e9cifique.</p> </li> </ul> <p>Le constructeur <code>def __init__(self, ...):</code> est donc une m\u00e9thode sp\u00e9ciale qui permet d'instancier un nouvel objet et d'initialiser ses attributs.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#exercices","title":"Exercices","text":"Exercice 4 - \u00c7a ne manque pas d'aire ! <ol> <li> <p>Cr\u00e9er une fonction <code>calculer_p\u00e9rim\u00e8tre(rectangle)</code> externe qui renvoie le p\u00e9rim\u00e8tre du rectangle donn\u00e9 en argument.</p> </li> <li> <p>Transformer cette fonction en une m\u00e9thode de la classe <code>Rectangle</code>.</p> </li> <li> <p>Au sein du m\u00eame script o\u00f9 est d\u00e9finit la classe <code>Rectangle</code>, d\u00e9finir une nouvelle classe <code>Cercle</code>. On souhaite une fonction ou une m\u00e9thode qui permet de calculer aussi l'aire pour les instances de <code>Cercle</code>.</p> </li> </ol> \u00a0\u00a0\u00a0Exercice 5 - Vroum Vroum <ol> <li> <p>\u00c9crire une classe <code>Voiture</code> qui contiendra les attributs <code>kilometrage</code>, <code>consommation</code> (nombre de litres de carburant consomm\u00e9 par kilom\u00e8tre) dont les valeurs seront donn\u00e9es comme arguments \u00e0 l'initialisation et un dernier attribut <code>carburant</code> valant 0 par d\u00e9faut.</p> </li> <li> <p>Doter la classe d'une m\u00e9thode <code>affiche</code> qui affiche le kilom\u00e9trage et le carburant disponible.</p> </li> <li> <p>Doter la classe d'une m\u00e9thode <code>remplir</code> qui prend en argument un entier correspondant au volume de carburant \u00e0 ajouter au r\u00e9servoir.</p> </li> <li> <p>Doter la classe d'une m\u00e9thode <code>avance</code> qui prend en argument un entier correspondant au nombre de kilom\u00e8tres parcourus et qui actualise les valeurs des attributs <code>kilometrage</code> et <code>consommation</code>.</p> </li> </ol> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; vega_myssil = Voiture(0, 8)\n&gt;&gt;&gt; vega_myssil.affiche()\nLa voiture a parcouru 0 kilom\u00e8tres et il y a 0 litres d'essence dans le r\u00e9servoir.\n&gt;&gt;&gt; vega_myssil.remplir(25)\n&gt;&gt;&gt; vega_myssil.avance(200)\n&gt;&gt;&gt; vega_myssil.affiche()\nLa voiture a parcouru 200 kilom\u00e8tres et il y a 9.0 litres d'essence dans le r\u00e9servoir.\n</code></pre> \u00a0\u00a0\u00a0Exercice 6 - Tic Tac <ol> <li> <p>\u00c9crire une classe <code>Horloge</code> qui contiendra les attributs <code>heures</code>, <code>minutes</code> et <code>secondes</code>.</p> </li> <li> <p>Doter la classe d'une m\u00e9thode <code>affiche(self)</code> qui affiche le temps de l'instance <code>self</code>.</p> </li> <li> <p>Doter la classe d'une m\u00e9thode <code>avance(self, s)</code> qui avance le temps de <code>s</code> secondes de l'instance <code>self</code>.</p> </li> </ol> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; h = Horloge(17, 25, 38)\n&gt;&gt;&gt; h.heures\n17\n&gt;&gt;&gt; h.minutes\n25\n&gt;&gt;&gt; h.secondes\n38\n&gt;&gt;&gt; h.affiche()\nIl est 17 heures, 25 minutes et 38 secondes.\n&gt;&gt;&gt; h.avance(27)\n&gt;&gt;&gt; h.affiche()\nIl est 17 heures, 26 minutes et 5 secondes.\n</code></pre> \u00a0\u00a0\u00a0Exercice 7 - Un d\u00e9but de jeu vid\u00e9o <p>\u00c9crire une classe <code>Player</code> qui :</p> <ul> <li>ne prendra aucun argument lors de l'instanciation.</li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>energie</code> valant 3 par d\u00e9faut. </li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>alive</code> valant <code>True</code> par d\u00e9faut.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>blessure()</code> qui diminue l'attribut <code>energie</code> de 1.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>soin()</code> qui augmente l'attribut <code>energie</code> de 1.</li> <li>si l'attribut <code>energie</code> passe \u00e0 0, l'attribut <code>alive</code> doit passer \u00e0 <code>False</code> et ne doit plus pouvoir \u00e9voluer.</li> </ul> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; mario = Player()\n&gt;&gt;&gt; mario.energie\n3\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.energie\n4\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nTrue\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.energie\n0\n</code></pre> \u00a0\u00a0\u00a0Exercice 8 - Un stage chez la Soci\u00e9t\u00e9 G\u00e9n\u00e9rale <p>D\u00e9finir une classe <code>CompteBancaire</code> dont le constructeur recevra en param\u00e8tres :</p> <ul> <li>un attribut <code>titulaire</code> stockant le nom du propri\u00e9taire.</li> <li>un attribut <code>solde</code> contenant le solde disponible sur le compte.</li> </ul> <p>Cette classe contiendra deux m\u00e9thodes <code>retrait</code> et <code>depot</code> qui permettront de retirer ou de d\u00e9poser de l'argent sur le compte.</p> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; mon_compte = CompteBancaire(\"A. Rouquan\", 1000)\n&gt;&gt;&gt; mon_compte.retrait(50)\nVous avez retir\u00e9 50 euros\nSolde actuel du compte : 950 euros\n&gt;&gt;&gt; mon_compte.retrait(40000)\nRetrait impossible\n&gt;&gt;&gt; mon_compte.depot(10000000)\nVous avez d\u00e9pos\u00e9 10000000 euros\nSolde actuel du compte : 10000950 euros\n</code></pre> \u00a0\u00a0\u00a0Exercice 9 - Des d\u00e8s <p>On souhaite construire une base d'objets servant \u00e0 cr\u00e9er des jeux utilisant des d\u00e9s.</p> <ul> <li> <p>Un d\u00e9 poss\u00e8de un nombre de faces, ainsi qu'une valeur (la face sup\u00e9rieure du d\u00e9 une fois qu'on l'a lanc\u00e9, et la valeur -1 s'il n'a pas encore \u00e9t\u00e9 lanc\u00e9). On doit pouvoir lancer le d\u00e9, c'est-\u00e0-dire lui attribuer une valeur al\u00e9atoire entre 1 et son nombre de faces. </p> </li> <li> <p>Un jeu de d\u00e9s est un ensemble de d\u00e9s. On doit pouvoir lancer tous les d\u00e9s (en une fois), faire la somme des valeurs des d\u00e9s, et on souhaite afficher la valeur des d\u00e9s ainsi que leur somme.</p> </li> </ul> <p>Questions :</p> <ol> <li> <p>D\u00e9terminer les attributs et m\u00e9thodes pour deux classes repr\u00e9sentant ce probl\u00e8me : une classe <code>Jeu</code> et une classe <code>D\u00e9</code>.</p> </li> <li> <p>D\u00e9finir les classes en Python. sachant qu'une instance de classe <code>Jeu</code> doit prendre en arguments le nombre de d\u00e9s et le nombre de faces de chaque d\u00e9 (identique pour tous les d\u00e9s), et qu'une instance de classe <code>De</code> doit prendre en argument son nombre de faces.</p> </li> </ol> Exemple d'utilisation<pre><code>&gt;&gt;&gt; j = Jeu(3, 6)  # cr\u00e9ation d'un jeu de 3 d\u00e9s \u00e0 6 faces\n&gt;&gt;&gt; j.afficher()\nLes d\u00e9s n'ont pas \u00e9t\u00e9 lanc\u00e9s !\n&gt;&gt;&gt; j.lancer()\n&gt;&gt;&gt; j.somme()\n13\n&gt;&gt;&gt; j.afficher()\nLes d\u00e9s valent 2, 5 et 6 et leur somme vaut 13.\n</code></pre>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#resume-et-vocabulaire","title":"R\u00e9sum\u00e9 et vocabulaire","text":"Terme D\u00e9finition Classe Type personnalis\u00e9. Mod\u00e8le pour cr\u00e9er des objets d\u00e9finissant leurs attributs et leurs m\u00e9thodes. Objet Instance concr\u00e8te d'une classe. Agglom\u00e8re un ensemble de valeurs (attributs). Attributs Valeurs agglom\u00e9r\u00e9es dans un objet. M\u00e9thodes Fonctions sp\u00e9cifiques et internes \u00e0 une classe. Constructeur M\u00e9thode sp\u00e9ciale qui permet d'instancier un nouvel objet et d'initialiser ses attributs."},{"location":"T2%20Structures%20de%20donn%C3%A9es/1poo/#mini-projet-mettre-le-paquet","title":"Mini-Projet : Mettre le paquet","text":"<p>L'objectif principal de ce projets est d'apprendre \u00e0 structurer son code en d\u00e9finissant des classes pertinentes.</p> <p>On souhaite cr\u00e9er le jeu de cartes Bataille (un peu plus tard). Pour y parvenir, on souhaite d'abord repr\u00e9senter un paquet de cartes qui soit g\u00e9n\u00e9ral : il pourra s'agir du paquet des 52 cartes, mais aussi de la main d'un joueur ou d'un tas de cartes quelconque. </p> Exemple d'utilisation<pre><code>&gt;&gt;&gt; paquet = cr\u00e9er_52_cartes()\n&gt;&gt;&gt; paquet.m\u00e9langer() \n&gt;&gt;&gt; print(paquet)\nLe paquet contient les cartes :\n3\u2666\ufe0f 10\u2665 D\u2665 4\u2665 9\u2660\ufe0f 3\u2665 As\u2660\ufe0f 8\u2660\ufe0f 4\u2666\ufe0f 6\u2663\ufe0f R\u2665 V\u2665 V\u2660\ufe0f 2\u2665 5\u2663\ufe0f 8\u2663\ufe0f 9\u2663\ufe0f D\u2666\ufe0f V\u2663\ufe0f 6\u2666\ufe0f 3\u2660\ufe0f 7\u2665 D\u2663\ufe0f 3\u2663\ufe0f R\u2660\ufe0f 7\u2663\ufe0f 2\u2663\ufe0f 6\u2665 2\u2660\ufe0f As\u2663\ufe0f 2\u2666\ufe0f 5\u2660\ufe0f V\u2666\ufe0f 5\u2666\ufe0f 7\u2666\ufe0f 8\u2665 6\u2660\ufe0f 7\u2660\ufe0f 9\u2665 8\u2666\ufe0f 9\u2666\ufe0f 10\u2663\ufe0f R\u2663\ufe0f R\u2666\ufe0f As\u2666\ufe0f As\u2665 4\u2660\ufe0f 5\u2665 4\u2663\ufe0f 10\u2666\ufe0f D\u2660\ufe0f 10\u2660\ufe0f\n&gt;&gt;&gt; carte = paquet.tirer_carte()\n&gt;&gt;&gt; print(carte)\n10\u2660\ufe0f\n&gt;&gt;&gt; len(paquet)\n51\n&gt;&gt;&gt; paquet.ajouter_carte_dessous(carte)\n&gt;&gt;&gt; len(paquet)\n52\n&gt;&gt;&gt; paquet1, paquet2 = couper(paquet)\n&gt;&gt;&gt; print(paquet1)\nLe paquet contient les cartes :\n10\u2660\ufe0f 3\u2666\ufe0f 10\u2665 D\u2665 4\u2665 9\u2660\ufe0f 3\u2665 As\u2660\ufe0f 8\u2660\ufe0f 4\u2666\ufe0f 6\u2663\ufe0f R\u2665 V\u2665 V\u2660\ufe0f 2\u2665 5\u2663\ufe0f 8\u2663\ufe0f 9\u2663\ufe0f D\u2666\ufe0f V\u2663\ufe0f 6\u2666\ufe0f 3\u2660\ufe0f 7\u2665 D\u2663\ufe0f 3\u2663\ufe0f R\u2660\ufe0f\n</code></pre> <p>Impl\u00e9menter les classes (attributs, m\u00e9thodes) et les fonctions pertinentes pour aboutir \u00e0 ces fonctionnalit\u00e9s.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/","title":"Les piles","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#les-piles","title":"Les piles","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#introduction","title":"Introduction","text":"<p>Une structure de donn\u00e9es est une mani\u00e8re d'organiser des donn\u00e9es pour les manipuler plus facilement. En premi\u00e8re, vous avez manipul\u00e9 les trois structures de donn\u00e9es les plus courantes, \u00e0 savoir les tableaux (<code>list</code>), les dictionnaires (<code>dict</code>) et les n-uplets (<code>tuple</code>).</p> <p>Une interface d\u00e9crit un ensemble de m\u00e9thodes (ou op\u00e9rations, ou primitives) abstraites qu'une structure de donn\u00e9es doit offrir, \u00e9tablissant ainsi une sorte de contrat avec l'utilisateur de cette structure. Peu importe la mani\u00e8re dont une telle structure est impl\u00e9ment\u00e9e, son interface demeure inchang\u00e9e.</p> <p>On se propose alors d'impl\u00e9menter une nouvelle structure de donn\u00e9es, la pile, et de l'utiliser concr\u00e8tement sur des probl\u00e8mes classiques.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#description","title":"Description","text":"<p>Une pile est une structure de donn\u00e9es fond\u00e9e sur le principe du \u00ab dernier entr\u00e9, premier sorti \u00bb (en anglais \u00ab Last In, First Out \u00bb, LIFO). C\u2019est le principe m\u00eame de la pile d\u2019assiettes : c\u2019est la derni\u00e8re assiette pos\u00e9e sur la pile d\u2019assiettes sales qui sera la premi\u00e8re lav\u00e9e. En programmation, on parle d'\u00e9l\u00e9ments plut\u00f4t que d'assiettes.</p> <p></p> <p>Cette structure de donn\u00e9es est :</p> <ul> <li>lin\u00e9aire : ses \u00e9l\u00e9ments sont organis\u00e9s de mani\u00e8re s\u00e9quentielle.</li> <li>dynamique : la taille d'une pile est variable en m\u00e9moire en raison des op\u00e9rations d'ajout et de retrait d'\u00e9l\u00e9ments.</li> <li>homog\u00e8ne : ses \u00e9l\u00e9ments sont suppos\u00e9s de m\u00eame type (entiers, flottants, cha\u00eenes...).</li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#interface","title":"Interface","text":"<p>On se propose d'impl\u00e9menter une pile par le biais d'une classe.</p> Op\u00e9ration Description Constructeur Cr\u00e9er une pile vide. <code>pile.empiler(e)</code> Ajoute l'\u00e9l\u00e9ment <code>e</code> au sommet de la pile. <code>pile.d\u00e9piler()</code> Renvoie l'\u00e9l\u00e9ment au sommet de la pile et le supprime. <code>pile.est_vide()</code> Renvoie <code>True</code> si la pile ne contient aucun \u00e9l\u00e9ment, <code>False</code> sinon. <code>pile.sommet()</code> Renvoie l'\u00e9l\u00e9ment au sommet de la pile sans le supprimer. <code>pile.taille()</code> Renvoie le nombre d'\u00e9l\u00e9ments dans la pile. Exemple d'utilisation d'une pile<pre><code>&gt;&gt;&gt; p = Pile()  # la pile p est vide\n&gt;&gt;&gt; p.empiler(12)\n&gt;&gt;&gt; p.empiler(14)\n&gt;&gt;&gt; p.empiler(18)\n&gt;&gt;&gt; p.empiler(17)  # la pile p est compos\u00e9e des \u00e9l\u00e9ments 12, 14, 18, 17\n&gt;&gt;&gt; p.sommet()\n17\n&gt;&gt;&gt; p.taille()\n4\n&gt;&gt;&gt; p.d\u00e9piler()  # la pile p est compos\u00e9e des \u00e9l\u00e9ments 12, 14, 18\n17\n&gt;&gt;&gt; p.d\u00e9piler()  # la pile p est compos\u00e9e des \u00e9l\u00e9ments 12, 14\n18\n&gt;&gt;&gt; p.taille()\n2\n&gt;&gt;&gt; p.est_vide()\nFalse\n&gt;&gt;&gt; p.d\u00e9piler()\n14\n&gt;&gt;&gt; p.d\u00e9piler()\n12\n&gt;&gt;&gt; p.est_vide()\nTrue\n</code></pre> <p>Exercices</p> <ol> <li> <p>Soit une pile compos\u00e9e des \u00e9l\u00e9ments suivants (par ordre d'ajout) : <code>\"chat\"</code>, <code>\"z\u00e8bre\"</code>, <code>\"gnou\"</code>, <code>\"chien\"</code>, <code>\"oiseau\"</code> et <code>\"ornithorynque\"</code>. Quel est l'effet de l'instruction <code>d\u00e9piler</code> sur cette pile ?</p> </li> <li> <p>Qu'affiche le programme suivant ?</p> <pre><code>p = Pile()\nfor i in range(5):\n    p.empiler(i * i)\na = p.d\u00e9piler()\nprint(a)\nprint(p.taille())\n</code></pre> </li> </ol>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#implementation-a-partir-dun-tableau-dynamique","title":"Impl\u00e9mentation \u00e0 partir d'un tableau dynamique","text":"<p>Finalement, une pile ressemble \u00e0 tableau dynamique (<code>list</code>) plus contraignant. La m\u00e9thode <code>.append</code> des listes ressemble \u00e0 la m\u00e9thode <code>.empiler</code> des piles et la m\u00e9thode <code>.pop</code> des listes ressemble \u00e0 la m\u00e9thode <code>.d\u00e9piler</code> des piles.</p> <p>Exercice</p> <p>Impl\u00e9menter la classe <code>Pile</code> en utilisant une liste comme conteneur des \u00e9l\u00e9ments. </p> <pre><code>class Pile:\n    def __init__(self):\n        self.\u00e9l\u00e9ments = []\n\n    def empiler(self, nouvel_\u00e9l\u00e9ment):\n        # \u00e0 compl\u00e9ter\n\n    def d\u00e9piler(self):\n        # \u00e0 compl\u00e9ter\n\n    # d\u00e9finir les autres primitives \n</code></pre> Correction \u2013 Impl\u00e9mentation d'une pile \u00e0 partir d'un tableau dynamique <pre><code>class Pile:\n    def __init__(self):\n        \"\"\" Initialise une pile vide. \"\"\"\n        self.\u00e9l\u00e9ments = []\n\n    def empiler(self, nouvel_\u00e9l\u00e9ment):\n        \"\"\" Ajoute l'\u00e9l\u00e9ment nouvel_\u00e9l\u00e9ment au sommet de la pile. \"\"\"\n        self.\u00e9l\u00e9ments.append(nouvel_\u00e9l\u00e9ment)\n\n    def d\u00e9piler(self):\n        \"\"\" Renvoie l'\u00e9l\u00e9ment au sommet de la pile et le supprime. \"\"\"\n        return self.\u00e9l\u00e9ments.pop()\n\n    def est_vide(self):\n        \"\"\" Renvoie True si la pile ne contient aucun \u00e9l\u00e9ment, False sinon. \"\"\"\n        return not self.\u00e9l\u00e9ments\n\n    def sommet(self):\n        \"\"\" Renvoie l'\u00e9l\u00e9ment au sommet de la pile sans le supprimer. \"\"\"\n        return self.\u00e9l\u00e9ments[-1]\n\n    def taille(self):\n        \"\"\" Renvoie le nombre d'\u00e9l\u00e9ments dans la pile. \"\"\"\n        return len(self.\u00e9l\u00e9ments)\n</code></pre>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#exercices","title":"Exercices","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#parfaitement-equilibre-comme-tout-devrait-etre","title":"Parfaitement \u00e9quilibr\u00e9... comme tout devrait \u00eatre.","text":"<p>\u00c9crire une fonction <code>bien_parenth\u00e9s\u00e9e(expression: str) -&gt; bool</code> qui v\u00e9rifie si l'expression math\u00e9matique <code>expression</code> (donn\u00e9e sous forme d'une cha\u00eene de caract\u00e8res) est correctement parenth\u00e9s\u00e9e en utilisant une pile.</p> Exemple de sortie<pre><code>&gt;&gt;&gt; bien_parenth\u00e9s\u00e9e(\"(..(..)..)\")\nTrue\n&gt;&gt;&gt; bien_parenth\u00e9s\u00e9e(\"(..)..)\")\nFalse\n&gt;&gt;&gt; bien_parenth\u00e9s\u00e9e(\"..)(..\")\nFalse\n&gt;&gt;&gt; bien_parenth\u00e9s\u00e9e(\"(..(..(..)..)\")\nFalse\n</code></pre> Algorithme <ol> <li>On cr\u00e9er une pile vide</li> <li> <p>On parcourt l'expression caract\u00e8re par caract\u00e8re :</p> <ul> <li> <p>Si on rencontre une parenth\u00e8se ouvrante <code>'('</code>, on l'empile.</p> </li> <li> <p>Si on rencontre une parenth\u00e8se fermante <code>')'</code> on d\u00e9pile si la pile n'est pas vide, sinon on renvoie faux.</p> </li> </ul> </li> <li> <p>Le parenth\u00e9sage est correct si et seulement si la pile est vide.</p> </li> </ol> Correction Parenth\u00e8sesG\u00e9n\u00e9ralisation <pre><code>def bien_parenth\u00e9s\u00e9e(expression: str) -&gt; bool:\n    \"\"\" Renvoie True si expression est bien parenth\u00e9s\u00e9e, False sinon. \"\"\"\n    pile = Pile()\n\n    for caract\u00e8re in expression:\n        if caract\u00e8re == '(':\n            pile.empiler(caract\u00e8re)\n        elif caract\u00e8re == ')':\n            if pile.est_vide():\n                return False\n            pile.d\u00e9piler(caract\u00e8re)\n\n    return pile.est_vide()\n</code></pre> <pre><code>def bien_d\u00e9limit\u00e9e(expression: str) -&gt; bool:\n    \"\"\" Renvoie True si expression est bien d\u00e9limit\u00e9e (parenth\u00e8ses, accolades, crochets), False sinon. \"\"\"\n    pile = Pile()\n    correspondance = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n\n    for caract\u00e8re in expression:\n        if caract\u00e8re in \"({[\":\n            pile.empiler(caract\u00e8re)\n        elif caract\u00e8re in \")}]\":\n            if pile.est_vide() or correspondance[pile.d\u00e9piler()] != caract\u00e8re:\n                return False\n\n    return pile.est_vide()\n</code></pre>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#implementation-a-partir-dun-tableau-statique","title":"Impl\u00e9mentation \u00e0 partir d'un tableau statique","text":"<p>Impl\u00e9menter une pile \u00e0 partir d'un tableau statique (de taille fixe). L'impl\u00e9mentation ne doit donc pas utiliser la m\u00e9thode <code>.append</code> et <code>.pop</code> des listes. </p> <p></p> D\u00e9but de l'impl\u00e9mentation<pre><code>class Pile:\n    def __init__(self, capacit\u00e9: int):\n        \"\"\" Initialise une pile vide avec une capacit\u00e9 maximale. \"\"\"\n        self.capacit\u00e9 = capacit\u00e9  # nombre maximum d'\u00e9l\u00e9ments dans la pile\n        self.\u00e9l\u00e9ments = [None] * capacit\u00e9\n        self.indice_sommet = -1  # indice de l'\u00e9l\u00e9ment au sommet, -1 est une valeur symbolique ici\n</code></pre> <p>D\u00e9finir le reste des primitives d'une pile.</p> Correction \u2013 Impl\u00e9mentation d'une pile \u00e0 partir d'un tableau statique <pre><code>class Pile:\n    def __init__(self, capacit\u00e9: int) -&gt; None:\n        \"\"\" Initialise une pile vide avec une capacit\u00e9 maximale. \"\"\"\n        self.capacit\u00e9 = capacit\u00e9  # nombre maximum d'\u00e9l\u00e9ments dans la pile\n        self.\u00e9l\u00e9ments = [None] * capacit\u00e9\n        self.indice_sommet = -1 # indice de l'\u00e9l\u00e9ment au sommet, -1 est une valeur symbolique ici\n\n    def taille(self) -&gt; int:\n        \"\"\" Renvoie la taille de la pile. \"\"\"\n        return self.indice_sommet + 1\n\n    def est_vide(self) -&gt; bool:\n        \"\"\" Renvoie True si la pile est vide, False sinon. \"\"\"\n        return self.taille() == 0\n\n    def est_plein(self) -&gt; bool:\n        \"\"\" Renvoie True si la pile est pleine, False sinon. \"\"\"\n        return self.taille() == self.capacit\u00e9\n\n    def empiler(self, nouvel_\u00e9l\u00e9ment) -&gt; None:\n        \"\"\" Empile l'\u00e9l\u00e9ment nouvel_\u00e9l\u00e9ment au sommet de la pile si elle n'est pas pleine. \"\"\"\n        if self.est_plein():\n            return\n\n        self.indice_sommet += 1\n        self.\u00e9l\u00e9ments[self.indice_sommet] = nouvel_\u00e9l\u00e9ment\n\n    def sommet(self):\n        \"\"\" Renvoie le sommet de la pile, None si elle est vide. \"\"\"\n        if not self.est_vide():\n            return self.\u00e9l\u00e9ments[self.indice_sommet]\n\n    def d\u00e9piler(self):\n        \"\"\" Retire le sommet de la pile et le renvoie, si il existe. \"\"\"\n        if self.est_vide():\n            return\n\n        sommet = self.sommet()\n        self.\u00e9l\u00e9ments[self.indice_sommet] = None\n        self.indice_sommet -= 1\n        return sommet\n\n    def afficher(self) -&gt; None:\n        \"\"\" Affiche la pile. \"\"\"\n        print(\"[]\" if self.est_vide() else self.\u00e9l\u00e9ments[:self.indice_sommet + 1])\n</code></pre>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/3piles/#dzien-dobry","title":"Dzie\u0144 dobry!","text":"<p>La notation polonaise inverse (NPI), \u00e9galement connue sous le nom de notation post-fix\u00e9e, permet d'\u00e9crire de fa\u00e7on non ambigu\u00eb des expressions arithm\u00e9tiques sans utiliser de parenth\u00e8ses.</p> Notation usuelle Notation polonaise invers\u00e9 \\(5 + 10\\) \\(\\texttt{5 10 +}\\) \\(3 \\times (4 + 7)\\) \\(\\texttt{4 7 + 3 *}\\) \\((10 + 4) - 2\\) \\(\\texttt{10 4 + 2 -}\\) \\((1 + 2) \\times (3 - 6)\\) \\(\\texttt{1 2 + 6 3 - *}\\) <p>Les calculatrices NPI se reposent sur l'utilisation d'une pile, en d'autres termes les op\u00e9randes sont dispos\u00e9es au sommet de la pile, tandis que les r\u00e9sultats des calculs sont retourn\u00e9s aussi au sommet de la pile.</p> <p></p> <p>\u00c9crire une fonction <code>calculer_npi(expression: str) -&gt; float</code> qui prend en param\u00e8tre une expression <code>expression</code> (sous la forme d'une cha\u00eene de caract\u00e8re) en notation polonaise invers\u00e9e et qui renvoie le r\u00e9sultat de l'expression.</p> <pre><code>&gt;&gt;&gt; calculer_npi(\"3 10 5 + *\")\n45.0\n</code></pre> Astuces <ul> <li> <p>La m\u00e9thode <code>.split</code> permet de scinder une cha\u00eene de caract\u00e8res suivant un caract\u00e8re sp\u00e9cifique :      </p><pre><code>&gt;&gt;&gt; \"jean-hubert-de-pons\".split(\"-\")\n['jean', 'hubert', 'de', 'pons']\n&gt;&gt;&gt; \"3 10 5 + *\".split() # par d\u00e9faut, scinde sur les espaces\n['3', '10', '5', '+', '*']\n</code></pre>     Sauriez-vous recoder une telle fonction ? </li> <li> <p>Pour tester si une cha\u00eene de caract\u00e8res est num\u00e9rique, on peut tenter de la convertir en <code>float</code>, si cela \u00e9choue alors c'est une valeur non-num\u00e9rique :     </p><pre><code>def est_num\u00e9rique(chaine: str) -&gt; bool:\n    \"\"\" Renvoie True si chaine peut \u00eatre convertie en float, False sinon. \"\"\"\n    try:  # try = essayer\n        float(chaine)  # renvoie une exception si chaine n'est pas convertible en float\n        return True\n    except:  # bloc ex\u00e9cut\u00e9 si une exception survient\n        return False\n</code></pre> <p>Si la structure <code>try except</code> n'est pas au programme, elle se rel\u00e8ve bien utile ici.</p> <pre><code>&gt;&gt;&gt; est_num\u00e9rique(\"5\")\nTrue\n&gt;&gt;&gt; est_num\u00e9rique(\"-42.3\")\nTrue\n&gt;&gt;&gt; est_num\u00e9rique(\"chat\")\nFalse\n&gt;&gt;&gt; est_num\u00e9rique(\"+\")\nFalse\n</code></pre> <p>Une autre impl\u00e9mentation de <code>est_num\u00e9rique</code> serait de parcourir la cha\u00eene pour d\u00e9terminer si elle est constitu\u00e9e de chiffres et \u00e9ventuellement, contient une virgule ou est pr\u00e9c\u00e9d\u00e9e d'un signe.</p> </li> </ul> <p>Une fois les op\u00e9rateurs arithm\u00e9tiques classiques impl\u00e9ment\u00e9es (addition, soustraction, multiplication...), il serait int\u00e9ressant de consid\u00e9rer des op\u00e9rateurs comme la racine carr\u00e9e, le cosinus etc.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/","title":"Les listes cha\u00een\u00e9es","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#les-listes-chainees","title":"Les listes cha\u00een\u00e9es","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#clarification-sur-les-references","title":"Clarification sur les r\u00e9f\u00e9rences","text":"<p>Vous avez s\u00fbrement d\u00e9j\u00e0 eu envie de copier une liste de cette mani\u00e8re :</p> Une copie malheureuse<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b.append(5)\n&gt;&gt;&gt; a\n[1, 2, 3, 4, 5]\n</code></pre> <p>A\u00efe, la liste <code>a</code> a \u00e9t\u00e9 modifi\u00e9e, mais pourquoi ? Vid\u00e9o explicative.</p> <p></p> <p>On retient que, en Python, tous les objets (tout except\u00e9 les entiers et les flottants finalement) sont manipul\u00e9s par r\u00e9f\u00e9rence.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#interface-et-implementation-dune-liste-chainee","title":"Interface et impl\u00e9mentation d'une liste cha\u00een\u00e9e","text":"<p>Une liste cha\u00een\u00e9e est une structure de donn\u00e9es lin\u00e9aire, homog\u00e8ne et dynamique compos\u00e9e de cha\u00eenons (ou n\u0153uds). Chaque cha\u00eenon contient :</p> <ul> <li>un \u00e9l\u00e9ment </li> <li>une r\u00e9f\u00e9rence vers le cha\u00eenon suivant</li> </ul> <p>Une telle structure ne stockera alors que la r\u00e9f\u00e9rence du premier cha\u00eenon, appel\u00e9 t\u00eate.</p> <p></p> <p>Contrairement \u00e0 un tableau dynamique, les \u00e9l\u00e9ments ne sont plus stock\u00e9s de mani\u00e8re contigu\u00ebs dans la m\u00e9moire. Si l'op\u00e9ration d'insertion et de suppression d'un \u00e9l\u00e9ment se d\u00e9roule en temps constant, l'acc\u00e8s au \\(i\\)-\u00e8me \u00e9l\u00e9ment d'une liste cha\u00een\u00e9e s'effectue en contrepartie en temps lin\u00e9aire.</p> <pre><code>class Cha\u00eenon:\n    def __init__(self, \u00e9l\u00e9ment, cha\u00eenon_suivant):\n        self.\u00e9l\u00e9ment = \u00e9l\u00e9ment\n        self.suivant = cha\u00eenon_suivant # r\u00e9f\u00e9rence du cha\u00eenon suivant\n\n\nclass ListeCha\u00een\u00e9e:\n    def __init__(self):\n        \"\"\" Initialise une liste cha\u00een\u00e9e vide. \"\"\"\n        self.t\u00eate = None  # r\u00e9f\u00e9rence du premier cha\u00eenon\n\n    def ins\u00e9rer_devant(self, \u00e9l\u00e9ment):\n        \"\"\" Ins\u00e8re un nouvel \u00e9l\u00e9ment \u00e0 la t\u00eate de la liste. \"\"\"\n        cha\u00eenon = Cha\u00eenon(\u00e9l\u00e9ment, self.t\u00eate)  #(1)!\n        self.t\u00eate = cha\u00eenon  #(2)!\n\n    def est_vide(self):\n        \"\"\" Renvoie True si la liste ne contient aucun \u00e9l\u00e9ment, False sinon. \"\"\"\n        return self.t\u00eate is None\n\n    def retirer_t\u00eate(self):\n        \"\"\" Retire le premier \u00e9l\u00e9ment de la liste. \"\"\"\n        if self.est_vide():\n            return None\n        self.t\u00eate = self.t\u00eate.suivant  #(3)!\n\n    def ins\u00e9rer_apr\u00e8s(self, cha\u00eenon, \u00e9l\u00e9ment):\n        \"\"\" Ins\u00e8re un nouvel \u00e9l\u00e9ment apr\u00e8s le cha\u00eenon donn\u00e9. \"\"\"\n        pass\n\n    def premier_\u00e9l\u00e9ment(self):\n        \"\"\" Renvoie l'\u00e9l\u00e9ment du premier cha\u00eenon de la liste. \"\"\"\n        pass\n\n    def taille(self):\n        \"\"\" Renvoie le nombre d'\u00e9l\u00e9ments de la liste. \"\"\"\n        pass\n\n    def afficher(self):\n        \"\"\" Affiche les \u00e9l\u00e9ments de la liste. \"\"\"\n        pass\n</code></pre> <ol> <li>On cr\u00e9e un nouveau cha\u00eenon que l'on connecte au premier cha\u00eenon de notre liste.</li> <li>On met \u00e0 jour la t\u00eate de notre liste.</li> <li>Puisque le cha\u00eenon que l'on d\u00e9connecte ne sera plus accessible dans le programme, Python le supprimera de la m\u00e9moire (par le biais du garbage collector).</li> </ol> Exercices <ol> <li> <p>Compl\u00e9ter les trois derni\u00e8res m\u00e9thodes.</p> Exemple d'utilisation d'une liste cha\u00een\u00e9e<pre><code>&gt;&gt;&gt; l = ListeCha\u00een\u00e9e()\n&gt;&gt;&gt; l.ins\u00e9rer_devant(36)\n&gt;&gt;&gt; l.ins\u00e9rer_devant(7)\n&gt;&gt;&gt; l.ins\u00e9rer_devant(15)\n&gt;&gt;&gt; l.ins\u00e9rer_devant(42)\n&gt;&gt;&gt; l.afficher()\n42 -&gt; 15 -&gt; 7 -&gt; 36\n&gt;&gt;&gt; l.taille()\n4\n&gt;&gt;&gt; l.t\u00eate()\n42\n&gt;&gt;&gt; l.retirer_t\u00eate()\n&gt;&gt;&gt; l.afficher()\n15 -&gt; 7 -&gt; 36\n&gt;&gt;&gt; l.ins\u00e9rer_apr\u00e8s(l.t\u00eate.suivant, 999)\n&gt;&gt;&gt; l.afficher()\n15 -&gt; 7 -&gt; 999 -&gt; 36\n</code></pre> </li> <li> <p>Quelle est la complexit\u00e9 en temps du calcul de la taille de la liste ? Quel attribut aurait-on pu ajouter \u00e0 <code>ListeCha\u00een\u00e9e</code> pour am\u00e9liorer cette complexit\u00e9 ? </p> </li> <li> <p>Impl\u00e9menter une pile \u00e0 partir d'une liste cha\u00een\u00e9e.</p> </li> </ol>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#exercices-supplementaires","title":"Exercices suppl\u00e9mentaires","text":"Exercices <ol> <li> <p>\u00c9crire une fonction <code>cr\u00e9er_liste_depuis_tab(tab)</code> qui cr\u00e9e une liste cha\u00een\u00e9e \u00e0 partir du tableau pass\u00e9 en argument.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 15, 17])\n&gt;&gt;&gt; l.afficher()\n12 -&gt; 15 -&gt; 17\n</code></pre> </li> <li> <p>Ajouter une m\u00e9thode <code>n_i\u00e8me_\u00e9l\u00e9ment(self, n)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui renvoie la valeur du \\(n\\)-i\u00e8me \u00e9l\u00e9ment de la liste cha\u00een\u00e9e <code>self</code>.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 35, 8, 42, 27, 35])\n&gt;&gt;&gt; l.n_i\u00e8me_\u00e9l\u00e9ment(4)\n27\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>concat\u00e9ner_listes(l1, l2)</code> qui renvoie une liste cha\u00een\u00e9e obtenue par concat\u00e9nation de <code>l1</code> et <code>l2</code> (sans copier les cha\u00eenons).</p> <pre><code>&gt;&gt;&gt; l1 = cr\u00e9er_liste_depuis_tab([12, 15, 17])\n&gt;&gt;&gt; l2 = cr\u00e9er_liste_depuis_tab([887, 998])\n&gt;&gt;&gt; l3 = concat\u00e9ner_listes(l1, l2)\n&gt;&gt;&gt; l3.afficher()\n12 -&gt; 15 -&gt; 17 -&gt; 887 -&gt; 998\n</code></pre> </li> <li> <p>Ajouter une m\u00e9thode <code>renverser(self)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui renverse les \u00e9l\u00e9ments de la liste cha\u00een\u00e9e <code>self</code>.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 15, 17])\n&gt;&gt;&gt; l.renverser()\n&gt;&gt;&gt; l.afficher()\n17 -&gt; 15 -&gt; 12\n</code></pre> </li> <li> <p>Ajouter une m\u00e9thode <code>ins\u00e9rer(self, \u00e9l\u00e9ment, n)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui ins\u00e8re l'\u00e9l\u00e9ment <code>\u00e9l\u00e9ment</code> \u00e0 la \\(n\\)-i\u00e8me position de la liste cha\u00een\u00e9e <code>self</code>.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 15, 17, 45])\n&gt;&gt;&gt; l.ins\u00e9rer(999, 2)\n&gt;&gt;&gt; l.afficher()\n12 -&gt; 15 -&gt; 999 -&gt; 17 -&gt; 45\n</code></pre> </li> <li> <p>Ajouter une m\u00e9thode <code>retirer(self, n)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui retire l'\u00e9l\u00e9ment \u00e0 la \\(n\\)-i\u00e8me position de la liste cha\u00een\u00e9e <code>self</code>.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 15, 17, 45])\n&gt;&gt;&gt; l.retirer(2)\n&gt;&gt;&gt; l.afficher()\n12 -&gt; 15 -&gt; 45\n</code></pre> </li> <li> <p>Ajouter une m\u00e9thode <code>occurrences(self, \u00e9l\u00e9ment)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui renvoie le nombre d\u2019occurrences de <code>\u00e9l\u00e9ment</code> dans la liste cha\u00een\u00e9e <code>self</code>.</p> <pre><code>&gt;&gt;&gt; l = cr\u00e9er_liste_depuis_tab([12, 35, 12, 42, 12, 35])\n&gt;&gt;&gt; l.occurrences(12)\n3\n</code></pre> </li> <li> <p>\u00c9tablir la complexit\u00e9 en temps pour chacune des m\u00e9thodes et fonctions \u00e9crites pr\u00e9c\u00e9demment.</p> </li> <li> <p>Ajouter une m\u00e9thode <code>vers_tableau(self)</code> \u00e0 la classe <code>ListeCha\u00een\u00e9e</code> qui renvoie un tableau des \u00e9l\u00e9ments de la liste cha\u00een\u00e9e <code>self</code>. Cette derni\u00e8re m\u00e9thode vous permettra de quasiment conna\u00eetre votre note \u00e0 l'avance ! Nommer votre fichier contenant votre classe Liste et les diff\u00e9rentes fonctions demand\u00e9es sous le nom <code>liste.py</code>, puis enregistrer le fichier  <code>note_liste.py</code> \u00e0 cot\u00e9 et ex\u00e9cuter-le !</p> </li> <li> <p>Les 4 derniers points de la note seront r\u00e9serv\u00e9s \u00e0 la clart\u00e9 et \u00e0 la documentation de votre code (description des m\u00e9thodes / fonctions, typage des param\u00e8tres et de la valeur renvoy\u00e9e si possible, noms de variables clairs).</p> </li> </ol>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#liste-doublement-chainee","title":"Liste doublement cha\u00een\u00e9e","text":"<p>Une liste cha\u00een\u00e9e a un seul sens de parcours, on la parcours toujours en partant de la t\u00eate. Pour rem\u00e9dier \u00e0 ce probl\u00e8me, on peut inclure une r\u00e9f\u00e9rence au cha\u00eenon pr\u00e9c\u00e9dent dans chaque cha\u00eenon : on aboutit alors \u00e0 une nouvelle structure de donn\u00e9es (toujours lin\u00e9aire, homog\u00e8ne et dynamique) appel\u00e9e liste doublement cha\u00een\u00e9e.</p> <p></p> <p>On pourra alors inclure une r\u00e9f\u00e9rence vers le dernier cha\u00eenon (la queue) dans l'objet de type <code>ListeDoublementCha\u00een\u00e9e</code> :</p> D\u00e9finition des attributs d'une liste doublement cha\u00een\u00e9e<pre><code>class Cha\u00eenonDoublementCha\u00een\u00e9e:\n    def __init__(self, \u00e9l\u00e9ment, pr\u00e9c\u00e9dent, suivant):\n        self.\u00e9l\u00e9ment = \u00e9l\u00e9ment\n        self.pr\u00e9c\u00e9dent = pr\u00e9c\u00e9dent\n        self.suivant = suivant\n\nclass ListeDoublementCha\u00een\u00e9e:\n    def __init__(self):\n        self.t\u00eate = None\n        self.queue = None\n</code></pre> <p>On pourra alors d\u00e9finir tout un tas de primitives sur cette structure : <code>taille</code>, <code>est_vide</code>, <code>t\u00eate</code>, <code>queue</code>, <code>ins\u00e9rer_devant</code>, <code>ins\u00e9rer_derri\u00e8re</code> etc. Une liste doublement cha\u00een\u00e9e est souvent utilis\u00e9e comme conteneur sous-jacent de la prochaine structure de donn\u00e9es \u00e9tudi\u00e9e, les files.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#clarification-sur-lallocation-de-memoire","title":"Clarification sur l'allocation de m\u00e9moire","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#tableau-dynamique-list","title":"Tableau dynamique <code>list</code>","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#liste-chainee-listechainee","title":"Liste cha\u00een\u00e9e <code>ListeCha\u00een\u00e9e</code>","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/4listes/#difference-de-complexite-des-primitives","title":"Diff\u00e9rence de complexit\u00e9 des primitives","text":"Structure de donn\u00e9es Ajouter au d\u00e9but Ajouter \u00e0 la fin Ins\u00e9rer Supprimer un \u00e9l\u00e9ment Acc\u00e8s au \\(i\\)-\u00e8me \u00e9l\u00e9ment Tableau dynamique <code>list</code> \\(O(n)\\) \\(O(1)\\) amorti \\(O(n)\\) \\(O(n)\\) \\(O(1)\\) Liste cha\u00een\u00e9e \\(O(1)\\) \\(O(n)\\) \\(O(1)\\) \\(O(1)\\) \\(O(n)\\) Liste doublement cha\u00een\u00e9e \\(O(1)\\) \\(O(1)\\) \\(O(1)\\) \\(O(1)\\) \\(O(n)\\) <p>Ainsi il faut bien choisir, selon son utilisation, le conteneur sous-jacent des \u00e9l\u00e9ments lorsqu'on impl\u00e9mente une nouvelle structure de donn\u00e9es comme une pile ou une file.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/","title":"Les files","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#les-files","title":"Les files","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#description-et-interface","title":"Description et interface","text":"<p>Une file est une structure de donn\u00e9es lin\u00e9aire, homog\u00e8ne et dynamique. Elle est fond\u00e9e sur le principe du \u00ab premier entr\u00e9, premier sorti \u00bb (en anglais \u00ab First In, First Out \u00bb, FIFO). Une file d'attente en est la parfaite analogie !</p> <p></p> <p>L'interface d'une file est compos\u00e9e des primitives suivantes :</p> Op\u00e9ration Description Constructeur Cr\u00e9er une file vide. <code>file.enfiler(e)</code> Ajoute l'\u00e9l\u00e9ment <code>e</code> \u00e0 la fin de la file. <code>file.d\u00e9filer()</code> Retire et renvoie l'\u00e9l\u00e9ment au d\u00e9but de la file. <code>file.t\u00eate()</code> Renvoie l'\u00e9l\u00e9ment au d\u00e9but de la file. <code>file.queue()</code> Renvoie l'\u00e9l\u00e9ment \u00e0 la fin de la file. <code>file.taille()</code> Renvoie le nombre d'\u00e9l\u00e9ments dans la file. <code>file.est_vide()</code> Renvoie <code>True</code> si la file ne contient aucun \u00e9l\u00e9ment, <code>False</code> sinon."},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#exercices","title":"Exercices","text":"Deux impl\u00e9mentations classiques Exemple d'utilisation d'une file<pre><code>&gt;&gt;&gt; f = File()\n&gt;&gt;&gt; f.enfiler(10)\n&gt;&gt;&gt; f.enfiler(42)\n&gt;&gt;&gt; f.enfiler(888)\n&gt;&gt;&gt; f.enfiler(31)\n&gt;&gt;&gt; f.afficher()\n31 -&gt; 888 -&gt; 42 -&gt; 10\n&gt;&gt;&gt; f.t\u00eate()\n10\n&gt;&gt;&gt; f.queue()\n31\n&gt;&gt;&gt; f.d\u00e9filer()\n10\n&gt;&gt;&gt; f.d\u00e9filer()\n42\n&gt;&gt;&gt; f.taille()\n2\n&gt;&gt;&gt; f.afficher()\n31 -&gt; 888\n&gt;&gt;&gt; f.est_vide()\nFalse\n&gt;&gt;&gt; f.d\u00e9filer()\n888\n&gt;&gt;&gt; f.d\u00e9filer()\n31\n&gt;&gt;&gt; f.est_vide()\nTrue\n</code></pre> <ol> <li> <p>Impl\u00e9menter une file \u00e0 partir d'un tableau dynamique (<code>list</code>) comme conteneur sous-jacent (utiliser les m\u00e9thodes <code>.insert</code> et <code>.pop</code>). Donner la complexit\u00e9 en temps des primitives.</p> </li> <li> <p>Impl\u00e9menter une file \u00e0 partir d'une liste doublement cha\u00een\u00e9e comme conteneur sous-jacent (vous pouvez utiliser mon impl\u00e9mentation  <code>liste_doublement_chainee.py</code>). Donner la complexit\u00e9 en temps des primitives.</p> </li> <li> <p>Quelle est la structure de donn\u00e9es la plus adapt\u00e9e pour impl\u00e9menter une file ; est-ce un tableau dynamique ou une liste doublement cha\u00een\u00e9e ? Justifier.</p> </li> </ol>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#jeu-de-bataille","title":"Jeu de Bataille","text":"<p>Le but de ce projet est de coder un jeu de Bataille en Python et de r\u00e9utiliser \u00e0 bon escient les structures de donn\u00e9es vues jusqu'\u00e0 maintenant (objets, piles, files, tableaux etc.).</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#regles","title":"R\u00e8gles","text":"<ul> <li>On distribue al\u00e9atoirement 52 cartes \u00e0 deux joueurs.</li> <li>\u00c0 chaque tour, chaque joueur retourne la carte du haut de sa main.</li> <li>Celui qui a la carte de la plus haute valeur, r\u00e9cup\u00e8re la lev\u00e9e qu'il place sous son paquet.</li> <li>En cas d'\u00e9galit\u00e9 de valeurs \u2014 cas appel\u00e9 bataille \u2014  les joueurs commencent par placer une premi\u00e8re carte face cach\u00e9e puis une seconde carte face visible pour d\u00e9cider qui fera la lev\u00e9e. En cas de nouvelle \u00e9galit\u00e9, la proc\u00e9dure est r\u00e9p\u00e9t\u00e9e.</li> <li>Lorsqu'un joueur a en sa possession toutes les cartes du jeu, la partie se termine et il est d\u00e9clar\u00e9 gagnant.</li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/5files/#implementation","title":"Impl\u00e9mentation","text":"<ol> <li> <p>Quelle structure de donn\u00e9es est adapt\u00e9e pour repr\u00e9senter :</p> <ol> <li> <p>une carte de jeu ?</p> </li> <li> <p>le paquet de d\u00e9part ?</p> </li> <li> <p>la main d'un joueur ?</p> </li> <li> <p>le tas de cartes d'un joueur lors d'une bataille ?</p> </li> </ol> </li> <li> <p>\u00c9crire la classe <code>Carte</code> dont les attributs sont <code>valeur</code> et <code>couleur</code> (on repr\u00e9sentera la couleur par un entier entre 0 et 3 et la valeur par un entier entre 2 et 14, o\u00f9 14 correspond \u00e0 l'As). D\u00e9finir la m\u00e9thode <code>__repr__</code>  qui permettra d'afficher facilement une carte avec <code>print</code> (utiliser les caract\u00e8res sp\u00e9ciaux <code>\u2665 \u2666\ufe0f \u2663\ufe0f \u2660\ufe0f</code>).</p> Exemple d'utilisation de la classe Carte<pre><code>&gt;&gt;&gt; print(Carte(2, 0))\n2\u2665\n&gt;&gt;&gt; print(Carte(14, 3))\nAs\u2660\ufe0f\n&gt;&gt;&gt; print(Carte(11, 1))\nV\u2666\ufe0f\n</code></pre> </li> <li> <p>On propose d'impl\u00e9menter un paquet de cartes avec un tableau dynamique <code>list</code> comme conteneur sous-jacent. Compl\u00e9ter la classe suivante :</p> Classe Paquet \u00e0 compl\u00e9ter<pre><code>class Paquet:\n    \"\"\" Repr\u00e9sente un paquet de cartes. \"\"\"\n\n    def __init__(self, cartes: list[Carte]) -&gt; None:\n        self.cartes = cartes  # [carte_dessous, ..., carte_dessus]\n\n    def tirer_carte_dessus(self) -&gt; Carte:\n        \"\"\" Retire et renvoie la carte au desssus du paquet. \"\"\"\n        pass\n\n    def ajouter_carte_dessus(self, carte: Carte) -&gt; None:\n        \"\"\" Ajoute une carte au dessus du paquet. \"\"\"\n        pass\n\n    def ajouter_carte_dessous(self, carte: Carte) -&gt; None:\n        \"\"\" Ajoute une carte au dessous du paquet. \"\"\"\n        pass\n\n    def ajouter_paquet_dessous(self, autre) -&gt; None:\n        \"\"\" Ajoute un autre paquet de carte en dessous du paquet. \"\"\"\n        pass\n\n    def est_vide(self) -&gt; bool:\n        \"\"\" Renvoie True si le paquet est vide, False sinon. \"\"\"\n        pass\n\n    def __repr__(self) -&gt; str:\n        pass\n\n    def m\u00e9langer(self) -&gt; None:\n        \"\"\" M\u00e9lange les cartes du paquet. \"\"\"\n        pass\n</code></pre> </li> <li> <p>Compl\u00e9ter les fonctions libres suivantes :</p> Fonctions libres \u00e0 compl\u00e9ter<pre><code>def g\u00e9n\u00e9rer_paquet_52_cartes() -&gt; Paquet:\n    \"\"\" G\u00e9n\u00e8re un paquet classique de 52 cartes. \"\"\"\n    pass\n\n\ndef couper(paquet: Paquet) -&gt; tuple[Paquet, Paquet]:\n    \"\"\" Coupe le paquet en deux et renvoie les deux nouveaux paquets. \"\"\"\n    pass\n</code></pre> Exemple d'utilisation<pre><code>&gt;&gt;&gt; paquet = g\u00e9n\u00e9rer_paquet_52_cartes()\n&gt;&gt;&gt; print(paquet)\n[2\u2665, 3\u2665, 4\u2665, 5\u2665, 6\u2665, 7\u2665, 8\u2665, 9\u2665, 10\u2665, V\u2665, D\u2665, R\u2665, As\u2665, 2\u2666\ufe0f, 3\u2666\ufe0f, 4\u2666\ufe0f, 5\u2666\ufe0f, 6\u2666\ufe0f, 7\u2666\ufe0f, 8\u2666\ufe0f, 9\u2666\ufe0f, 10\u2666\ufe0f, V\u2666\ufe0f, D\u2666\ufe0f, R\u2666\ufe0f, As\u2666\ufe0f, 2\u2663\ufe0f, 3\u2663\ufe0f, 4\u2663\ufe0f, 5\u2663\ufe0f, 6\u2663\ufe0f, 7\u2663\ufe0f, 8\u2663\ufe0f, 9\u2663\ufe0f, 10\u2663\ufe0f, V\u2663\ufe0f, D\u2663\ufe0f, R\u2663\ufe0f, As\u2663\ufe0f, 2\u2660\ufe0f, 3\u2660\ufe0f, 4\u2660\ufe0f, 5\u2660\ufe0f, 6\u2660\ufe0f, 7\u2660\ufe0f, 8\u2660\ufe0f, 9\u2660\ufe0f, 10\u2660\ufe0f, V\u2660\ufe0f, D\u2660\ufe0f, R\u2660\ufe0f, As\u2660\ufe0f]\n&gt;&gt;&gt; p, q = couper(paquet)\n&gt;&gt;&gt; print(q)\n[2\u2663\ufe0f, 3\u2663\ufe0f, 4\u2663\ufe0f, 5\u2663\ufe0f, 6\u2663\ufe0f, 7\u2663\ufe0f, 8\u2663\ufe0f, 9\u2663\ufe0f, 10\u2663\ufe0f, V\u2663\ufe0f, D\u2663\ufe0f, R\u2663\ufe0f, As\u2663\ufe0f, 2\u2660\ufe0f, 3\u2660\ufe0f, 4\u2660\ufe0f, 5\u2660\ufe0f, 6\u2660\ufe0f, 7\u2660\ufe0f, 8\u2660\ufe0f, 9\u2660\ufe0f, 10\u2660\ufe0f, V\u2660\ufe0f, D\u2660\ufe0f, R\u2660\ufe0f, As\u2660\ufe0f]\n</code></pre> </li> <li> <p>Impl\u00e9menter une classe <code>Bataille</code> qui comprend une m\u00e9thode <code>r\u00e9initialiser</code> qui distribue al\u00e9atoirement les cartes entre deux joueurs et <code>jouer</code> qui joue automatiquement le jeu de Bataille.</p> </li> <li> <p>En moyenne, sur un grand nombre de parties, combien de tours de jeu comporte une partie de Bataille ?</p> </li> </ol>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/6graphes/","title":"Les graphes","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/6graphes/#les-graphes","title":"Les graphes","text":"<p>Liens Capytale</p> <ul> <li>\u00c0 la d\u00e9couverte des graphes :  Notebook Capytale ceb1-2792273</li> <li>Repr\u00e9sentation des graphes :  Notebook Capytale 505c-2844042</li> <li>Parcours en largeur :  Notebook Capytale be49-2854965</li> <li>Parcours en profondeur :  Notebook Capytale e655-2874716 A\u00efe a\u00efe a\u00efe la version imp\u00e9rative est erron\u00e9e, faites un tour sur Wikipedia pour le pseudocode, ce que j'aurai d\u00fb faire ! Merci Louis ! \ud83d\ude30</li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/6graphes/#synthese","title":"Synth\u00e8se","text":"<p>A venir ! Peut-\u00eatre... </p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/6graphes/#detection-de-cycle-circuit","title":"D\u00e9tection de cycle / circuit","text":"<p>Dans la cas non-orient\u00e9, d\u00e9tecter un cycle est \u00ab simple \u00bb car un parcours en largeur suffit : si lors du parcours du voisinage d'un sommet on retombe sur un sommet d\u00e9j\u00e0 marqu\u00e9, cela veut dire que l'on a d\u00e9tect\u00e9 un cycle.</p> <p>Soit \\(s\\) le sommet de d\u00e9part. Si \\(u\\) a \u00e9t\u00e9 marqu\u00e9, alors il existe une cha\u00eene entre \\(s\\) et \\(u\\) car il est atteignable. On suppose qu'on d\u00e9file le sommet \\(v\\), il existe donc une cha\u00eene entre \\(s\\) et \\(v\\) car il est lui aussi marqu\u00e9. Donc si \\(u\\) est un voisin de \\(v\\) alors on a d\u00e9tect\u00e9 le cycle \\(s ~\\mathrm{-}~ \\cdots ~\\mathrm{-}~ u ~\\mathrm{-}~ v ~\\mathrm{-}~ \\cdots ~\\mathrm{-}~ s\\).</p> <p>Dans le cas orient\u00e9, la d\u00e9tection est plus d\u00e9licate, car retomber sur un sommet d\u00e9j\u00e0 visit\u00e9 n'implique pas n\u00e9cessairement la pr\u00e9sence d'un circuit. Pour r\u00e9soudre ce probl\u00e8me, il faut classifier les diff\u00e9rents types d'arcs rencontr\u00e9s par un parcours en profondeur. On suppose qu'un parcours en profondeur d\u00e9couvre les sommets A, B, C, F, H, E :</p> <p></p> <p>Seuls les arcs de retour t\u00e9moigne d'un circuit ! Un arc de retour appara\u00eet lorsqu'on parcours le voisinage d'un sommet, si l'on rencontre un des anc\u00eatres. L'id\u00e9e est donc d'ajouter un marquage suppl\u00e9mentaire : un sommet est dit \u00ab termin\u00e9 \u00bb si on a d\u00e9couvert toute sa descendance. Si on tombe sur un sommet non-termin\u00e9, alors on a pris un arc de retour ! L'algorithme original colorie symboliquement les sommets en trois couleurs :</p> <ul> <li>Blanc : Sommet non-visit\u00e9</li> <li>Gris : Sommet visit\u00e9 mais non-termin\u00e9</li> <li>Noir : Sommet termin\u00e9</li> </ul> <p>L'algorithme se repose sur le parcours en profondeur r\u00e9cursif ici. Initialement, tous les sommets seront de couleur blanche. Lorsqu'on visitera un sommet \\(s\\), si :</p> <ul> <li>\\(s\\) est gris, on a pris un arc de retour, on vient de d\u00e9couvrir un circuit.</li> <li>\\(s\\) est noir, on a pris un arc avant ou transverse, on ne fait rien.</li> <li>\\(s\\) est blanc, on a pris un arc de liaison (ou \\(s\\) est le sommet initial) :<ul> <li>Colorier le sommet \\(s\\) en gris</li> <li>Visiter tous les voisins de \\(s\\) r\u00e9cursivement</li> <li>Les diff\u00e9rents appels r\u00e9cursifs font qu'\u00e0 ce moment-l\u00e0, tous les descendants de \\(s\\) sont termin\u00e9s, donc on colorie le sommet \\(s\\) en noir</li> </ul> </li> </ul> <pre><code>BLANC, GRIS, NOIR = 0, 1, 2  # constantes symboliques\n\ndef parcours_profondeur_circuit(graphe, s, couleurs: dict) -&gt; bool:\n    pass\n\ndef poss\u00e8de_circuit(graphe):\n    couleurs = {s: BLANC for s in graphe.sommets()}\n    for s in graphe.sommets(): # on teste tous les sommets de d\u00e9parts possibles\n        if parcours_profondeur_circuit(graphe, s, couleurs):\n            return True\n    return False\n</code></pre> <p>Question</p> <p>Compl\u00e9ter l'algorithme sur le TP Parcours en profondeur et le tester.</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/6graphes/#projet-dijkstra","title":"Projet Dijkstra","text":"<p>Lien vers le diaporama</p> <ul> <li>Lien vers le diaporama sur l'algorithme de Dijkstra</li> </ul> <p>Impl\u00e9mentation de l'algorithme de Dijkstra</p> <ul> <li> <p>Impl\u00e9menter la classe <code>GraphePond\u00e9r\u00e9</code> qui repr\u00e9sente un graphe non-orient\u00e9 o\u00f9 les ar\u00eates sont pond\u00e9r\u00e9es. La repr\u00e9sentation par un dictionnaire d'adjacence est pr\u00e9f\u00e9r\u00e9e. On stockera le poids d'une ar\u00eate directement dans le dictionnaire d'adjacence dans un tuple :</p> Dictionnaire d'adjacence pour un graphe pond\u00e9r\u00e9<pre><code>graphe = GraphePond\u00e9r\u00e9()\ngraphe.adjdict = {\n    'S': [('A', 4), ('B', 2)],\n    'A': [('S', 4), ('B', 1), ('C', 3), ('D', 4)],\n    'B': [('S', 2), ('A', 1), ('C', 6), ('E', 8)],\n    'C': [('A', 3), ('B', 6), ('D', 3), ('E', 2)],\n    'D': [('A', 4), ('C', 3), ('E', 2), ('F', 7)],\n    'E': [('B', 8), ('C', 2), ('D', 2), ('F', 8)],\n    'F': [('D', 7), ('E', 8)]\n}\n</code></pre> <p>Ainsi on pourra facilement r\u00e9cup\u00e9rer les poids des ar\u00eates lorsqu'on parcourt le voisinage d'un sommet :</p> Exemple du parcours du voisinage pour un graphe pond\u00e9r\u00e9<pre><code>for sommet_voisin, poids_arete in graphe.voisins('S'):\n    # ...\n</code></pre> </li> <li> <p>Impl\u00e9menter l'algorithme de Dijkstra <code>def dijsktra(graphe, sommet_d\u00e9part)</code> qui renvoie la distance minimale entre tous les sommets et le sommet de d\u00e9part.</p> <pre><code>from pprint import pprint\n\ndistances = dijkstra(graphe, 'S')\npprint(distances)\n</code></pre> <pre><code>{\n    'S': 0,\n    'A': 3,\n    'B': 2,\n    'C': 6,\n    'D': 7,\n    'E': 8,\n    'F': 14\n}\n</code></pre> </li> <li> <p>Modifier l'algorithme pour conna\u00eetre aussi les plus courts chemins en conservant le pr\u00e9d\u00e9cesseur pour chaque sommet.</p> <pre><code>distances, pr\u00e9d\u00e9cesseurs = dijkstra(graphe, 'S')\npprint(pr\u00e9d\u00e9cesseurs)\n</code></pre> <pre><code>{\n    'S': None,\n    'A': 'B',\n    'B': 'S',\n    'C': 'A',\n    'D': 'A',\n    'E': 'C',\n    'F': 'D'\n}\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>plus_court_chemin(pr\u00e9d\u00e9cesseurs, sommet_destination)</code> qui renvoie les sommets du plus court chemin vers le sommet de destination.</p> <pre><code>&gt;&gt;&gt; distances, pr\u00e9d\u00e9cesseurs = dijkstra(graphe, 'S')\n&gt;&gt;&gt; plus_court_chemin(pr\u00e9d\u00e9cesseurs, 'F')\n['S', 'B', 'A', 'D', 'F']\n</code></pre> </li> <li> <p>T\u00e9l\u00e9charger les donn\u00e9es suivantes sur la Charente-Maritime. D\u00e9terminer le plus court chemin de Pons vers La Rochelle ! Le jeu de donn\u00e9es est un graphe o\u00f9 les sommets sont les diff\u00e9rentes communes et les ar\u00eates des routes (artificiellement cr\u00e9es par mes petites mains \u00e0 partir d'une triangulation de Delaunay).</p> <p></p> <p></p> </li> </ul> <p>Vous pouvez utiliser la biblioth\u00e8que <code>matplotlib</code> pour afficher le plus court chemin de Pons vers La Rochelle (ChatGPT peut \u00eatre utile ici).</p>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/","title":"Les arbres binaires","text":""},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/#les-arbres-binaires","title":"Les arbres binaires","text":"<p>Liens Capytale</p> <ul> <li>\u00c0 la d\u00e9couverte des arbres binaires :  Notebook Capytale ac40-3104814</li> <li>Les parcours des arbres binaires :  Notebook Capytale e6d0-3126581</li> <li>Les arbres binaires de recherche :  Notebook Capytale ddd2-3129906</li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/#definitions","title":"D\u00e9finitions","text":"<ul> <li> <p>Un arbre est un graphe connexe et sans cycle. C'est une structure de donn\u00e9es hi\u00e9rarchique. </p> </li> <li> <p>Vocabulaire associ\u00e9 : </p> <p>D\u00e9finition ambigu\u00eb</p> <p>Attention \u00e0 la d\u00e9finition vague de la profondeur d'un n\u0153ud et, par cons\u00e9quent, de la hauteur d'un arbre ! Deux conventions existent. La profondeur d'un n\u0153ud est soit le nombre d'ar\u00eates, soit le nombre de n\u0153uds sur le chemin de la racine \u00e0 ce n\u0153ud. L'exemple utilise cette derni\u00e8re convention. La hauteur est d\u00e9finie comme la profondeur maximale atteinte par un n\u0153ud de l'arbre.</p> </li> <li> <p>Un arbre binaire est un arbre o\u00f9 chaque n\u0153ud poss\u00e8de au plus deux fils ; un fils gauche et un fils droit.</p> <p></p> </li> <li> <p>Un arbre binaire est dit filiforme si la hauteur est maximale et \u00e9quilibr\u00e9 si la hauteur est minimale. </p> <p></p> </li> <li> <p>Soit un arbre binaire de taille \\(n\\) (son nombre de n\u0153uds), alors sa hauteur \\(h\\) (suivant la convention pr\u00e9c\u00e9dente) v\u00e9rifie :</p> \\[\\big\\lceil \\log_2 \\left( n + 1 \\right) \\big\\rceil \\leq h \\leq n\\] <p>On retient qu'un arbre \u00e9quilibr\u00e9 avec \\(n\\) n\u0153uds a une hauteur d'environ \\(\\log_2(n)\\).</p> </li> <li> <p>Impl\u00e9mentation minimale d'un arbre binaire :</p> <pre><code>class Noeud:\n    def __init__(self, valeur, noeud_gauche, noeud_droit):\n        self.valeur = valeur       # (1)! \n        self.gauche = noeud_gauche # (2)!\n        self.droit  = noeud_droit  # (3)!\n</code></pre> <ol> <li>Une valeur associ\u00e9e \u00e0 un n\u0153ud (un nombre, une cha\u00eene de caract\u00e8res etc.)</li> <li>Une r\u00e9f\u00e9rence vers le n\u0153ud fils gauche. <code>None</code> s'il n'existe pas.</li> <li>Une r\u00e9f\u00e9rence vers le n\u0153ud fils droit. <code>None</code> s'il n'existe pas.</li> </ol> <p>Chaque n\u0153ud d'un arbre peut \u00eatre vu comme la racine d'un sous-arbre ! Il est alors assez courant de confondre les notions de n\u0153uds et d'arbres.</p> </li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/#algorithmes-classiques","title":"Algorithmes classiques","text":"<ul> <li> <p>La plupart des algorithmes sur les arbres binaires sont r\u00e9cursifs, car un arbre binaire est une structure de donn\u00e9es r\u00e9cursive.</p> <p></p> </li> <li> <p>La taille d'un arbre \\(A\\) (son nombre de n\u0153uds) peut \u00eatre d\u00e9finie r\u00e9cursivement comme :</p> \\[ \\text{taille}(A)= \\begin{cases} 0 &amp; \\text{si} \\ A = \\varnothing \\\\ 1 + \\text{taille}(A_g) + \\text{taille}(A_d)&amp; \\text{sinon} \\end{cases} \\] <p>O\u00f9 \\(A_g\\) (resp. \\(A_d\\)) est le sous-arbre gauche (resp. droit) de \\(A\\). L'impl\u00e9mentation en Python est alors imm\u00e9diate :</p> <pre><code>def taille(racine: Noeud):\n    \"\"\" Renvoie la taille de l'arbre dont la racine est `racine` \"\"\"\n    if racine is None:\n        return 0\n    else:\n        return 1 + taille(racine.gauche) + taille(racine.droit)\n</code></pre> </li> <li> <p>La hauteur d'un arbre \\(A\\) :</p> \\[ \\text{hauteur}(A)= \\begin{cases} 0 &amp; \\text{si} \\ A = \\varnothing \\\\ 1 + \\max\\Big( \\text{hauteur}(A_g),\\ \\text{hauteur}(A_d) \\Big) &amp; \\text{sinon} \\end{cases} \\] <pre><code>def hauteur(racine: Noeud):\n    \"\"\" Renvoie la hauteur de l'arbre dont la racine est `racine` \"\"\"\n    if racine is None:\n        return 0\n    else:\n        return 1 + max(hauteur(racine.gauche), hauteur(racine.droit))\n</code></pre> </li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/#parcours-en-profondeur-dun-arbre-binaire","title":"Parcours en profondeur d'un arbre binaire","text":"<ul> <li> <p>Il existe trois parcours en profondeur d'un arbre binaire suivant l'ordre de visite de la racine d'un sous-arbre :</p> <p></p> </li> <li> <p>Finalement, en terme de code, il suffit de d\u00e9placer une simple ligne de code :</p> D\u00e9commenter la ligne suivant le parcours souhait\u00e9<pre><code>def parcours(racine: Noeud):\n    if racine is not None:\n        # print(racine.valeur) # Parcours pr\u00e9fixe\n        parcours(racine.gauche)\n        # print(racine.valeur) # Parcours infixe\n        parcours(racine.droit)\n        # print(racine.valeur) # Parcours suffixe\n</code></pre> </li> <li> <p>Le parcours pr\u00e9fixe est le parcours en profondeur classique. Le parcours infixe sera utile pour afficher les valeurs d'un ABR dans l'ordre.</p> </li> </ul>"},{"location":"T2%20Structures%20de%20donn%C3%A9es/7arbres/#arbre-binaire-de-recherche-abr","title":"Arbre Binaire de Recherche (ABR)","text":"<ul> <li> <p>Un Arbre Binaire de Recherche (ABR) est un arbre binaire o\u00f9 la valeur (qu'on appelle cl\u00e9) de chaque n\u0153ud est inf\u00e9rieure \u00e0 toutes les valeurs dans son sous-arbre droit et sup\u00e9rieure \u00e0 toutes les valeurs dans son sous-arbre gauche.</p> <p></p> <p>Le parcours infixe permet de traiter les n\u0153uds par ordre croissant.</p> </li> <li> <p>Cette structure de donn\u00e9es permet de maintenir des valeurs tri\u00e9es (et donc de rechercher rapidement une valeur gr\u00e2ce \u00e0 une recherche dichotomique) et d'ins\u00e9rer de mani\u00e8re efficiente de nouvelles valeurs.</p> </li> </ul> <p></p> Structure Complexit\u00e9 moyenne  <code>ins\u00e9rer</code> Complexit\u00e9 moyenne  <code>rechercher</code> Tableau non-tri\u00e9 \\(O(1)\\) \\(O(n)\\) Tableau tri\u00e9 \\(O(n)\\) \\(O(\\log n)\\) ABR \\(O(\\log n)\\) \\(O(\\log n)\\) <p></p>"},{"location":"T3%20Architecture/1revision/","title":"R\u00e9visions sur les r\u00e9seaux","text":""},{"location":"T3%20Architecture/1revision/#revisions-sur-les-reseaux","title":"R\u00e9visions sur les r\u00e9seaux","text":"<p>Filius</p> <p>Filius est un logiciel qui permet de simuler un r\u00e9seau informatique.</p> <p>Document R\u00e9ponse Capytale</p> <p>Notez vos diff\u00e9rentes r\u00e9ponses sur le document r\u00e9ponse, logique, non ?</p>"},{"location":"T3%20Architecture/1revision/#un-reseau-local","title":"Un r\u00e9seau local","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment le switch achemine les trames d'un n\u0153ud source vers le bon n\u0153ud de destination gr\u00e2ce aux adresses MAC.</p>"},{"location":"T3%20Architecture/1revision/#un-premier-reseau","title":"Un premier r\u00e9seau","text":"<ul> <li>Dans Filius, r\u00e9aliser le r\u00e9seau suivant. Cocher \u00ab Utiliser l'adresse IP comme nom \u00bb et \u00ab Utiliser l'adresse MAC comme nom \u00bb. Veuillez \u00e0 bien d\u00e9finir les adresses IP des h\u00f4tes.</li> </ul> <ul> <li>A travers ce TP, on associe aux diff\u00e9rentes machines un utilisateur :</li> </ul> Utilisateur Adresse IP Alice <code>192.168.0.1</code> Bob <code>192.168.0.2</code> Charlie <code>192.168.0.3</code> <ul> <li> <p>Lancer la simulation.</p> </li> <li> <p>D\u00e9finir la vitesse de la simulation \u00e0 1%.</p> </li> </ul>"},{"location":"T3%20Architecture/1revision/#avant-lenvoie-de-donnees-sur-le-reseau","title":"Avant l'envoie de donn\u00e9es sur le r\u00e9seau","text":"<ul> <li> <p>Cliquer le switch pour r\u00e9v\u00e9ler sa table interne SAT avant l'envoie de donn\u00e9es sur le r\u00e9seau.</p> </li> <li> <p>Cliquer sur le premier h\u00f4te <code>192.168.0.1</code> (Alice). Installer le logiciel Ligne de commande sur cette machine et ex\u00e9cuter-le.</p> </li> </ul> Questions 1 <ol> <li> <p>Que vaut la table SAT du switch initialement ?</p> </li> <li> <p>Que renvoie la commande <code>ipconfig</code> ?</p> </li> <li> <p>Que renvoie la commande <code>arp</code> ?</p> </li> </ol>"},{"location":"T3%20Architecture/1revision/#apres-lenvoie-de-donnees-sur-le-reseau-local","title":"Apr\u00e8s l'envoie de donn\u00e9es sur le r\u00e9seau local","text":"<ul> <li>R\u00e9aliser un ping de Alice <code>192.168.0.1</code> vers Charlie <code>192.168.0.3</code> gr\u00e2ce \u00e0 la commande <code>ping 192.168.0.3</code>.</li> </ul> Questions 2 <ol> <li> <p>Que vaut maintenant la table SAT du switch ? \u00c0 quoi sert-elle ?</p> </li> <li> <p>Que renvoie maintenant la commande <code>arp</code> ? \u00c0 quoi sert la table ARP ?</p> </li> <li> <p>Que renvoie la commande <code>arp</code> sur l'h\u00f4te de destination Charlie <code>192.168.0.3</code> ? Et Bob <code>192.168.0.2</code> ?</p> </li> </ol>"},{"location":"T3%20Architecture/1revision/#ou-est-charlie","title":"O\u00f9 est Charlie ?","text":"<p>Avant le premier ping, les diff\u00e9rents h\u00f4tes et le switch n'ont aucune connaissance du r\u00e9seau local auquel ils sont connect\u00e9s. Ainsi quand Alice envoie un message \u00e0 Charlie, elle ne conna\u00eet pas encore l'adresse MAC de ce dernier. Quelle adresse MAC de destination doit-elle inscrire sur la trame qu'elle envoie sur le r\u00e9seau ?</p> <p>Elle envoie simplement un message \u00e0 tout le monde sur le r\u00e9seau local pour trouver Charlie ! C'est ce que l'on appelle une diffusion g\u00e9n\u00e9rale, ou un broadcast.</p> Analyse de la d\u00e9couverte du r\u00e9seau <ol> <li> <p>Alice g\u00e9n\u00e8re une trame : Alice fait une demande de ping, le message est \u00ab Bonjour Bob, c'est Alice, ceci est un ping. Renvoie-moi un message. \u00bb. Le protocole TCP encapsule ce message dans un segment, puis le protocole IP encapsule ce segment TCP dans un paquet IP. Ce paquet est enfin encapsul\u00e9 dans une trame Ethernet.</p> </li> <li> <p>** En-t\u00eate de la trame : Sur la trame qu'elle envoie sur le r\u00e9seau, Alice y inscrit l'adresse MAC de destination <code>FF:FF:FF:FF:FF:FF</code>, c'est l'adresse de diffusion g\u00e9n\u00e9rale (broadcast)**.</p> </li> <li> <p>R\u00e9ception par le switch : Le switch re\u00e7oit la trame broadcast d'Alice et la diffuse sur tous ses autres ports, \u00e0 Bob et \u00e0 Charlie donc. Par ailleurs, il enregistre dans sa table SAT l'adresse MAC d'Alice (l'adresse MAC source de la trame) en y associant le port o\u00f9 Alice est connect\u00e9e.</p> </li> <li> <p>R\u00e9ception par Bob : Bob re\u00e7oit la trame broadcast depuis le switch. Il la d\u00e9capsule en un paquet et regarde l'adresse IP de destination. Ce n'est pas la sienne, donc il ignore le paquet.</p> </li> <li> <p>R\u00e9ception par Charlie : Charlie re\u00e7oit la trame broadcast et la d\u00e9capsule, l'adresse IP de destination indiqu\u00e9e sur le paquet est la sienne. Il d\u00e9capsule enfin le paquet jusqu'\u00e0 lire le message d'Alice \u00ab Bonjour Bob, c'est Alice, ceci est un ping. Renvoie-moi un message. \u00bb. Il note aussi l'adresse MAC d'Alice dans sa table ARP. </p> </li> <li> <p>Charlie g\u00e9n\u00e8re une trame : Charlie renvoie donc un message \u00e0 Alice. Il y inscrit l'adresse IP d'Alice sur le paquet et son adresse MAC sur la trame.</p> </li> <li> <p>R\u00e9ception par le switch : La trame de Charlie passe tout d'abord par le switch. Ce dernier ajoute l'adresse MAC de Charlie dans sa table ARP. Le switch conna\u00eet l'adresse MAC d'Alice, donc il aiguille la trame sur le bon port. </p> </li> <li> <p>R\u00e9ception par Alice : Alice re\u00e7oit le message de Charlie et note son adresse MAC dans sa table ARP.</p> </li> </ol> En vid\u00e9o <p>N'h\u00e9sitez pas \u00e0 faire pause \u00e0 chaque \u00e9tape :</p> <p></p> Questions 3 <ol> <li> <p>Quelles sont les adresses MAC source et de destination inscrit dans l'en-t\u00eate dans la premi\u00e8re trame envoy\u00e9e par Alice ?</p> </li> <li> <p>Cette trame encapsule un paquet. Quelles sont les adresses IP source et de destination inscrit dans l'en-t\u00eate de ce paquet ? </p> </li> <li> <p>Pourquoi Bob refuse ce qu'il re\u00e7oit ?</p> </li> <li> <p>Pourquoi Charlie refuse ce qu'il re\u00e7oit ?</p> </li> <li> <p>Quelles sont les adresses MAC source et de destination inscrit dans l'en-t\u00eate dans la trame envoy\u00e9e par Charlie ? Et les adresses IP source et de destination du paquet encapsul\u00e9 dans la trame ?</p> </li> <li> <p>Est-ce que le switch d\u00e9capsule les trames qu'il re\u00e7oit ? C'est-\u00e0-dire, regarde-t-il les adresses IP du paquet contenu dans la trame ? Change-t-il les adresses MAC source/destination de la trame ? </p> </li> <li> <p>Est-ce que les diff\u00e9rents h\u00f4tes, Alice, Bob et Charlie d\u00e9capsulent les trames qu'ils re\u00e7oivent ?</p> </li> <li> <p>Que se passe-t-il si Alice envoie un ping \u00e0 l'adresse IP <code>192.168.0.4</code> dans la simulation (remettre la vitesse de simulation \u00e0 100%) ? Est-ce logique ?</p> </li> </ol>"},{"location":"T3%20Architecture/1revision/#sous-reseaux","title":"Sous-r\u00e9seaux","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment la notion de sous-r\u00e9seaux : la division d'un r\u00e9seau en plusieurs sous-groupes.</p>"},{"location":"T3%20Architecture/1revision/#une-introduction","title":"Une introduction","text":"<ul> <li>Renommer le switch en \u00ab SwitchFrance \u00bb. Cr\u00e9er un second r\u00e9seau de trois machines d'adresses IP <code>192.168.1.1</code>, <code>192.168.1.2</code> et <code>192.168.1.3</code> avec un \u00ab SwitchUkraine \u00bb. Relier les deux switchs.</li> </ul> Utilisateur Adresse IP Anastasia <code>192.168.1.1</code> Boris <code>192.168.1.2</code> Katia <code>192.168.1.3</code> Questions 4 <ol> <li> <p>Tester un ping de <code>192.168.0.1</code> (Alice) vers <code>192.168.1.2</code> (Boris). Que se passe-t-il?</p> </li> <li> <p>Renommer la machine <code>192.168.1.2</code> (Boris) en <code>192.168.0.4</code> et retenter le ping. Que se passe-t-il?</p> </li> </ol>"},{"location":"T3%20Architecture/1revision/#masque-de-sous-reseau","title":"Masque de sous-r\u00e9seau","text":"<p>Lorsqu'une machine A veut envoyer un message \u00e0 une machine B, elle doit d\u00e9terminer si cette machine :</p> <ul> <li> <p>appartient au m\u00eame sous-r\u00e9seau : auquel cas le message est envoy\u00e9 directement via un ou plusieurs switchs.</p> </li> <li> <p>n'appartient pas au m\u00eame sous-r\u00e9seau : auquel cas le message doit d'abord transiter par un routeur (voir plus loin).</p> </li> </ul> <p>La notion de sous-r\u00e9seau n'est pas topologique \u2014 il ne suffit pas de relier physiquement les dispositifs entre eux \u2014 mais ob\u00e9it \u00e0 des r\u00e8gles num\u00e9riques. C'est le masque de sous-r\u00e9seau (parfois simplement masque, ou netmask en anglais) qui permet de d\u00e9terminer quelles adresses font partie d'un m\u00eame sous-r\u00e9seau.</p>"},{"location":"T3%20Architecture/1revision/#adresse-ip-et-masque-de-sous-reseau","title":"Adresse IP et masque de sous-r\u00e9seau","text":"<p>Une adresse IP est cod\u00e9e sur 4 octets (32 bits) et peut \u00eatre coup\u00e9 en deux :</p> <ul> <li> <p>L'adresse du r\u00e9seau : les \\(k\\) premiers bits</p> </li> <li> <p>L'adresse du r\u00e9seau : les \\(32 - k\\) bits restants.</p> </li> </ul> Exemple 1Exemple 2 <ul> <li> <p>Par d\u00e9faut, le masque de Filius est <code>255.255.255.0</code>, soit en binaire <code>11111111.11111111.11111111.00000000</code>.</p> </li> <li> <p>Donc \\(k = 24\\). On note souvent l'adresse IP d'Alice comme <code>192.168.0.1 /24</code></p> </li> <li> <p>Suivant ce masque, 256 machines peuvent donc appartenir au m\u00eame sous-r\u00e9seau (ce n'est pas tout \u00e0 fait le cas car des adresses finissant par 0 ou par 255 sont r\u00e9serv\u00e9es).</p> </li> <li> <p>Deux machines appartiennent a un m\u00eame sous-r\u00e9seau si elles partagent donc les 24 premiers bits, c'est \u00e0 dire les 3 premiers nombres (octets). Ainsi Alice est dans le sous-r\u00e9seau \u00ab <code>192.168.0</code> \u00bb.</p> </li> </ul> <ul> <li> <p>Soit le masque <code>255.255.248.0</code>, en binaire <code>11111111.11111111.11111000.00000000</code>.</p> </li> <li> <p>Donc \\(k = 21\\). L'adresse IP d'Alice se note <code>192.168.0.1 /21</code>.</p> </li> <li> <p>Deux machines appartiennent au m\u00eame sous-r\u00e9seau si elles partagent les 21 premiers bits de leur adresse IP.</p> </li> </ul> Question 5 <p>Dans l'exemple 2, combien de machines peuvent appartenir \u00e0 ce m\u00eame sous-r\u00e9seau ?</p>"},{"location":"T3%20Architecture/1revision/#appartenance-a-un-meme-sous-reseau","title":"Appartenance \u00e0 un m\u00eame sous-r\u00e9seau","text":"<p>Pour que deux machines appartiennent \u00e0 un m\u00eame sous-r\u00e9seau, il faut donc que leurs adresses IP respectives partagent les m\u00eames \\(k\\) premiers bits d\u00e9finis par le masque.</p> <p>Pour cela, on extrait les \\(k\\) premiers bits correspondant au sous-r\u00e9seau d'une adresse IP quelconque gr\u00e2ce l'op\u00e9ration du ET logique bit \u00e0 bit (bitwise and en anglais) que l'on note <code>&amp;</code> pour le diff\u00e9rencier du ET logique usuel <code>&amp;&amp;</code>. On effectue le calcul <code>Adresse IP &amp; Masque</code>. Par exemple :</p> <pre><code>\u2022 Adresse IP :  192.168.1.2    =  11000000.10101000.00000001.00000010\n\u2022 Masque     :  255.255.248.0  =  11111111.11111111.11111000.00000000\n\n\u2022 Adresse IP &amp; Masque :\n\n    11000000.10101000.00000001.00000010  \u25c0  Adresse IP\n &amp;  11111111.11111111.11111000.00000000  \u25c0  Masque\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    11000000.10101000.00000000000000000  \u25c0  Sous-r\u00e9seau\n</code></pre> <p>Comme vous pouvez le constater, les bits \u00e0 <code>0</code> masque la partie inf\u00e9rieure de l'adresse IP !</p> Question 6 <p>On consid\u00e8re trois h\u00f4tes A, B et C aux adresses IP respectives <code>192.168.129.10</code>, <code>192.168.135.200</code> et <code>192.168.145.1</code> configur\u00e9es avec le masque de sous-r\u00e9seau <code>255.255.248.0</code>. Remplir le tableau :</p> <p></p> Machines Adresse IP Masque Adresse IP &amp; Masque A <code>192.168.129.10</code> <code>255.255.248.0</code> B <code>192.168.135.200</code> <code>255.255.248.0</code> C <code>192.168.145.1</code> <code>255.255.248.0</code> <p></p>"},{"location":"T3%20Architecture/1revision/#le-routeur","title":"Le routeur","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment le routeur interconnecte deux sous-r\u00e9seaux en routant les paquets.</p> <p>Fichier Filius</p> <p>Si vous n'avez pas sauvegard\u00e9 votre r\u00e9seau, t\u00e9l\u00e9chargez ce fichier.</p> <p>Comment faire pour que le sous-r\u00e9seau \u00ab France \u00bb communique avec le sous-r\u00e9seau \u00ab Ukraine \u00bb ? Comment interconnecter les deux sous-r\u00e9seaux con\u00e7us pr\u00e9c\u00e9demment ? Gr\u00e2ce \u00e0 un \u00e9quipement de la couche 3 (couche r\u00e9seau), le routeur. Ce dispositif, parfois appel\u00e9 passerelle, est \u00e9quip\u00e9 de deux cartes r\u00e9seaux (chacune ayant une adresse physique MAC et une adresse logique IP) ou plus.</p> <p></p> <ol> <li> <p>En mode conception , ajouter un routeur \u00e0 deux interfaces et le relier aux deux switchs. Si vous ne l'avez pas d\u00e9j\u00e0 fait, supprimer le c\u00e2ble entre les deux switchs.</p> <p>Pourquoi deux interfaces ? Il faut bien une carte r\u00e9seau par sous-r\u00e9seau !</p> </li> <li> <p>Configurer le routeur :</p> <ul> <li>Son interface reli\u00e9e au \u00ab SwitchFrance \u00bb doit appartenir au sous-r\u00e9seau \u00ab France \u00bb. Donc on doit configurer son adresse IP sous la forme <code>192.168.0.XXX</code> (on conserve le masque par d\u00e9faut <code>255.255.255.0</code>).</li> </ul> <p>G\u00e9n\u00e9ralement, on donne une adresse finissant par <code>254</code> (<code>255</code> \u00e9tant r\u00e9serv\u00e9 pour effectuer un ping l'int\u00e9gralit\u00e9 d'un sous-r\u00e9seau).</p> <ul> <li> <p>Faire de m\u00eame pour la deuxi\u00e8me interface du routeur.</p> </li> <li> <p>S\u00e9lectionner \u00ab Routage automatique \u00bb dans l'onglet \u00ab G\u00e9n\u00e9ral \u00bb.</p> </li> </ul> <p> </p> </li> <li> <p>En mode simulation  , tester un <code>ping</code> depuis la machine <code>192.168.0.1</code> (Alice) vers <code>192.168.1.1</code> (Anastasia). Que se passe-t-il ?</p> <p>La carte r\u00e9seau d'Alice ne sait pas o\u00f9 envoyer les paquets car l'adresse IP d'Anastasia ne fait pas parti de son sous-r\u00e9seau. Alice ne sait pas non plus qu'il existe un routeur (passerelle) dans son sous-r\u00e9seau.</p> </li> <li> <p>En mode configuration , cliquer sur la machine d'Alice et lui renseigner la passerelle de son sous-r\u00e9seau. Retenter le ping.</p> <p>Le ping se termine en <code>timeout</code> ? Il ne faut pas oublier qu'un ping renvoie un \u00e9cho pong... </p> </li> <li> <p>Une fois qu'Alice et Anastasia peuvent communiquer, effectuer un <code>traceroute</code> pour afficher le nombre de sauts n\u00e9cessaires.</p> </li> </ol> Questions 7 <p>Ex\u00e9cuter l'invite de commandes de Windows : Win+R puis <code>cmd</code> puis Enter.</p> <ol> <li> <p>Gr\u00e2ce \u00e0 la commande <code>ipconfig /all</code>, donner l'adresse IP et MAC de la carte r\u00e9seau du PC.</p> </li> <li> <p>Donner aussi l'adresse IP de la passerelle par d\u00e9faut.</p> </li> <li> <p>Afficher aussi la table ARP gr\u00e2ce \u00e0 la commande <code>arp -a</code>. Quelle est l'adresse MAC de la passerelle ?</p> </li> <li> <p><code>traceroute</code> devient <code>tracert</code> sous Windows. L'adresse IP du serveur Web https://lycee-pons.org/ est <code>213.186.33.4</code>. Combien faut-il de sauts pour y parvenir depuis votre poste ?</p> </li> </ol>"},{"location":"T3%20Architecture/2routage/","title":"Le routage","text":""},{"location":"T3%20Architecture/2routage/#le-routage","title":"Le routage","text":"<p>Document R\u00e9ponse Capytale</p> <p>Capytale buggue ces derniers jours, le document r\u00e9ponse arrive promis \ud83d\ude4f Pendant ce temps, utiliser un document texte (Google Doc, Notepad etc.).</p>"},{"location":"T3%20Architecture/2routage/#rappels","title":"Rappels","text":"<p>Les machines (ou h\u00f4tes) d'un m\u00eame sous-r\u00e9seau communiquent gr\u00e2ce \u00e0 un switch (ou commutateur en fran\u00e7ais). Pour que deux machines de sous-r\u00e9seaux diff\u00e9rents communiquent, les sous-r\u00e9seaux sont interconnect\u00e9s par des routeurs. Un routeur est une machine qui redirige les paquets au sein d'un r\u00e9seau pour qu'ils arrivent \u00e0 destination.</p> <p></p> <p>Le but de ce chapitre est de comprendre comment les routeurs parviennent \u00e0 rediriger les paquets.</p>"},{"location":"T3%20Architecture/2routage/#table-de-routage","title":"Table de routage","text":"<p>Pour se concentrer sur le routage des paquets, un tel r\u00e9seau peut aussi se repr\u00e9senter comme :</p> <p></p> <p>Lorsqu'un routeur re\u00e7oit un paquet, il utilise sa table de routage pour d\u00e9terminer le prochain n\u0153ud vers lequel le paquet doit \u00eatre dirig\u00e9. Par exemple, la table de routage du routeur R1 peut \u00eatre \u00e9crite comme :</p> <p></p> R\u00e9seau destination Prochain routeur Interface Ethernet A - eth0 B R3 eth1 C R2 eth2 <p></p> Question 1 <ol> <li> <p>Que fait le routeur R1 lorsqu'il re\u00e7oit le paquet suivant ?</p> <ul> <li>IP Source : <code>192.168.1.120</code></li> <li>IP Destination : <code>192.168.3.88</code> </li> </ul> </li> <li> <p>Proposer deux tables de routage possibles pour le routeur R3.</p> </li> <li>Le routeur R3 tombe en panne, comment est modifi\u00e9e la table de routage du routeur R1 ?</li> </ol>"},{"location":"T3%20Architecture/2routage/#routage-manuel-sur-3-routeurs","title":"Routage manuel sur 3 routeurs","text":"<p>Sur le logiciel Filius, configurer le r\u00e9seau suivant :</p> <p></p> <p>Un peu de vocabulaire</p> <ul> <li> <p>Les routeurs R1 et R3 sont appel\u00e9s routeurs d'acc\u00e8s, car ils sont en bordure de r\u00e9seaux.</p> </li> <li> <p>Le routeur R2 est un routeur interne.</p> </li> </ul> <p>La table de routage initiale du routeur R1 :</p> <p></p> Question 2 <p>Chercher sur le web la signification de loopback (ou rebouclage), comment ce principe s'applique-t-il ici ?</p> <p>Indiquons au routeur R1 la direction que devra prendre un paquet \u00e0 destination du r\u00e9seau <code>192.168.1.0/24</code> (tout \u00e0 droite) :</p> <ul> <li>Ajouter une nouvelle ligne \u00e0 la table de routage de R1</li> <li> <p>Compl\u00e9ter alors les champs :</p> <ul> <li>IP de destination : <code>192.168.1.0/24</code></li> <li>Masque : <code>255.255.255.0</code></li> <li>Passerelle suivante : <code>1.0.0.2</code></li> <li>Via l'interface : <code>1.0.0.1</code></li> </ul> </li> <li> <p>Tester \u00e0 partir de P1 et la commande ping <code>192.168.1.0</code>.</p> </li> </ul> Questions 3 <ol> <li> <p>Le paquet est-il transmis \u00e0 P2 ? Vous pouvez ouvrir les fen\u00eatres d'\u00e9changes de donn\u00e9es n\u00e9cessaires.</p> </li> <li> <p>Compl\u00e9ter et donner les tables de routages de R2 et et R3 pour que la commande ping fonctionne correctement.</p> </li> </ol> <p>Nous allons modifier la topologie du r\u00e9seau, en ajoutant un routeur R4 et un portable P3 de la mani\u00e8re suivante (le portable P1 et le routeur R1 sont inchang\u00e9s) :</p> <p></p> <p>Astuce</p> <p>Si vous \u00eates \u00e0 cours de prises r\u00e9seaux sur certains routeurs, vous pouvez en ajouter de nouvelles via le bouton \"G\u00e9rer les connexions\".</p> Question 4 <p>Modifiez les tables de routages n\u00e9cessaires pour que les 3 portables puissent communiquer. T\u00e9l\u00e9charger le fichier du r\u00e9seau et le remettre au professeur !</p> <p>M\u00eame pour des r\u00e9seaux de petites taille, il est difficile de maintenir des tables de routages manuellement. D\u00e8s que le nombre de routeurs internes augmente, arrivent d'autres questions :</p> <p></p> <p>Dans une telle situation, quelle route est \u00e0 privil\u00e9gier pour relier le client au serveur ?</p> <ul> <li><code>R1 \u25ba R2 \u25ba R3 \u25ba R5 \u25ba R6</code></li> <li><code>R1 \u25ba R2 \u25ba R4 \u25ba R5 \u25ba R6</code></li> <li><code>R1 \u25ba R2 \u25ba R5 \u25ba R6</code></li> </ul> <p>Nous aurions tendance \u00e0 penser naturellement qu'il faut prendre la troisi\u00e8me solution, pour laquelle un saut de moins est n\u00e9cessaire, mais est-ce judicieux si les liaisons <code>R2 \u25ba R3 \u25ba R5</code> sont fibr\u00e9es alors que la liaison <code>R2 \u25ba R5</code> est une liaison cuivre classique ?</p>"},{"location":"T3%20Architecture/2routage/#un-premier-protocole-automatique-de-routage-rip","title":"Un premier protocole automatique de routage : RIP","text":"<p>Le protocole RIP (Routing Information Protocol) rentre dans la cat\u00e9gorie des protocoles \u00e0 vecteur de distance. Un vecteur de distance est un couple <code>(adresse, distance)</code>, et ce protocole cherche \u00e0 minimiser le nombre de routeurs \u00e0 traverser pour atteindre la destination (on cherche ici \u00e0 minimiser le nombre de sauts).</p> <p>Chaque routeur re\u00e7oit en permanence (toutes les 30 secondes environ) de ses voisins les informations de routage qu'ils poss\u00e8dent. Il va alors exploiter ces informations pour construire lui-m\u00eame sa table de routage en ne retenant que les informations les plus pertinentes : une simple comparaison permet de ne garder que le chemin le plus avantageux. Il transmettra \u00e0 son tour ces informations \u00e0 ses voisins et ainsi de suite. C'est l'algorithme de Bellman-Ford (un algorithme du plus court chemin comme Dijkstra mais bas\u00e9 sur de la programmation dynamique), un des algorithmes de recherche de plus court chemin dans un graphe, que nous \u00e9tudierons plus en d\u00e9tail dans le chapitre sur les graphes.</p> <p>A l'issue de quelques \u00e9tapes, les tables de tous les routeurs se stabilisent et le routage est pleinement op\u00e9rationnel. Le temps n\u00e9cessaire \u00e0 la stabilisation des tables est proportionnel au diam\u00e8tre du r\u00e9seau, c'est-\u00e0-dire \u00e0 la plus grande route possible entre deux routeurs - c'est ce qui est appel\u00e9 vitesse de convergence.</p> <p>Algorithme RIP</p> <p>Lorsqu'un routeur re\u00e7oit une nouvelle route de la part d'un voisin, 4 cas sont envisageables :</p> <ul> <li>Il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu : il l'ajoute \u00e0 sa table.</li> <li>Il d\u00e9couvre une route vers un r\u00e9seau connu, plus courte que celle qu'il poss\u00e8de dans sa table : il la remplace par la nouvelle.</li> <li>Il d\u00e9couvre une route vers un r\u00e9seau connu, plus longue que celle qu'il poss\u00e8de dans sa table : il l'ignore.</li> <li>Il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table : il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e.</li> </ul> <p>Quand il met \u00e0 jour les distances re\u00e7ues, il ajoute 1 \u00e0 celles-ci, pour prendre en compte le hop (saut) suppl\u00e9mentaire effectu\u00e9.</p>"},{"location":"T3%20Architecture/2routage/#activite-debranchee","title":"Activit\u00e9 d\u00e9branch\u00e9e","text":"<p>Chacun d'entre-vous se verra remettre un num\u00e9ro de routeur, ainsi que la connaissance de ses voisins proches. Nous allons simuler l'ex\u00e9cution de l'algorithme de Bellman-Ford, en construisant petit-\u00e0-petit vos tables de routages.</p>"},{"location":"T3%20Architecture/2routage/#exemple-dapplication","title":"Exemple d'application","text":"<p>On reconsid\u00e8re le r\u00e9seau suivant :</p> <p></p> <ul> <li> <p>Le poste client et le poste serveur se voient attribu\u00e9s respectivement la premi\u00e8re adresse de la plage de leur r\u00e9seau ( soit respectivement <code>192.168.0.1</code> et <code>172.16.180.1</code>)</p> </li> <li> <p>Les routeurs d'acc\u00e8s R1 et R6 ont sur leur interface r\u00e9seau les derni\u00e8res adresses IP de la plage de leur r\u00e9seau (soit respectivement <code>192.168.0.254</code> et <code>172.16.180.254</code>)</p> </li> <li> <p>Entre deux interfaces internes, le routeur de plus bas indice poss\u00e8de la premi\u00e8re adresse et le routeur de dernier indice la seconde adresse : par exemple entre R2 et R5, les interfaces sont connect\u00e9es par le r\u00e9seau <code>10.1.4.0/30</code>, donc l'interface de R2 est <code>10.1.4.1</code> et celle de R5 est <code>10.1.4.2</code></p> </li> </ul>"},{"location":"T3%20Architecture/2routage/#initialisation","title":"Initialisation","text":"<p>Au d\u00e9marrage, les routeurs ne connaissent que leur voisin imm\u00e9diat. Les tables de routages pour les routeurs R1, R2 et R3 sont donc :</p> <p></p>"},{"location":"T3%20Architecture/2routage/#etape-1","title":"\u00c9tape 1","text":"<ul> <li> <p>R1 re\u00e7oit les routes de R2. Sa table de routage devient :     </p> </li> <li> <p>R3 re\u00e7oit les routes de R2 et celles de R5. On peut constater qu'on peut atteindre de deux mani\u00e8res diff\u00e9rentes les routeurs R2 et R5, car R3 ne r\u00e9alise pas que les interfaces 10.1.2.1 et 10.1.4.1 sont toutes les deux deux interfaces de R2. De m\u00eame il sait rejoindre de deux mani\u00e8res ayant la m\u00eame m\u00e9trique le r\u00e9seau 10.1.4.0/30, donc il garde la premi\u00e8re arriv\u00e9e (ici on suppose d'il a re\u00e7u les informations de R2 avant celles de R5)     </p> </li> <li> <p>R2 re\u00e7oit les routes de R1, puis de R3, mais aussi de R4 et de R5 :     </p> </li> </ul>"},{"location":"T3%20Architecture/2routage/#etape-2","title":"\u00c9tape 2","text":"<ul> <li> <p>R1 re\u00e7oit les nouvelles routes de R2 :     </p> </li> <li> <p>R2 re\u00e7oit les nouvelles routes de R3 et de R5 :     </p> </li> <li> <p>R2 re\u00e7oit les nouvelles routes de R1 (qui ne lui apportent rien), de R3, de R4, de R5 :     </p> </li> </ul>"},{"location":"T3%20Architecture/2routage/#etape-3","title":"\u00c9tape 3","text":"<p>Cette derni\u00e8re table de R2 sera transmise \u00e0 l'\u00e9tape suivante \u00e0 R1, et une liaison sera alors possible d\u00e8s l'\u00e9tape 3 entre le Client et le Serveur. Dans ce mini-r\u00e9seau, les tables sont alors toutes stabilis\u00e9es d\u00e8s la troisi\u00e8me \u00e9tape, et le r\u00e9seau est totalement op\u00e9rationnel.</p> Question 5 <p>Donner les tables de routage des routeurs R3 et R6 du r\u00e9seau suivant une fois le protocole RIP stabilis\u00e9 :</p> <p></p> <p>Pour simplifier les tables, on les \u00e9crira comme celle de routeur R1 :</p> <p></p> R\u00e9seau destination Prochain routeur Distance A - 1 B R3 3 C R2 3 <p></p>"},{"location":"T3%20Architecture/2routage/#points-importants","title":"Points importants","text":"<p>Un des inconv\u00e9nients du protocole RIP est qu'il g\u00e9n\u00e8re un traffic important entre voisins, chacun envoyant sa table de routage \u00e0 tous ses voisins \u00e0 intervalles r\u00e9guliers.</p> <p>En cons\u00e9quences, le protocole RIP est configur\u00e9 pour se limiter \u00e0 un nombre maximum de 15 sauts, ce qui le r\u00e9serve \u00e0 des r\u00e9seaux de petites taille.</p> <p>L'avantage de cette limite est qu'elle permet d'\u00e9viter les \u00e9ventuelles boucles de routage (comme <code>R2 \u25ba R3 \u25ba R5 \u25ba R2</code>), en utilisant le TTL qui ne doit pas d\u00e9passer 15, afin qu'un paquet qui tourne en rond soit d\u00e9truit.</p> <p>De m\u00eame, si un routeur ne re\u00e7oit pas d'informations d'un de ses voisins directs au bout d'un ordre de temps de trois minutes, il consid\u00e8re que ce routeur est hors-service et lui affecte une distance de 16, qui est alors consid\u00e9r\u00e9e dans ce protocole comme une distance infinie. En cons\u00e9quence tous ses voisins recalculeront leurs vecteurs en \u00e9vitant le lien qui est tomb\u00e9.</p>"},{"location":"T3%20Architecture/2routage/#un-deuxieme-protocole-automatique-de-routage-ospf","title":"Un deuxi\u00e8me protocole automatique de routage : OSPF","text":""},{"location":"T3%20Architecture/2routage/#le-principe","title":"Le principe","text":"<p>Les algorithmes de routage \u00e0 \u00e9tat de lien utilisent une m\u00e9thode appel\u00e9e plus court chemin d'abord (SPF, Shortest Path First). Pour trouver le plus court chemin, les routeurs doivent conna\u00eetre la carte compl\u00e8te du r\u00e9seau. Pour cela, chaque routeur envoie r\u00e9guli\u00e8rement l\u2019\u00e9tat de ses liens \u00e0 tous les autres routeurs du r\u00e9seau. Les informations \u00e9chang\u00e9es concernent uniquement la qualit\u00e9 des connexions entre deux routeurs, souvent mesur\u00e9e par leur vitesse en bits par seconde (bps), comme Mbps ou Gbps.</p> <p>Si un routeur re\u00e7oit une nouvelle information diff\u00e9rente de celle qu\u2019il a d\u00e9j\u00e0, il met \u00e0 jour ses donn\u00e9es. Apr\u00e8s un certain temps, tous les routeurs ont \u00e9chang\u00e9 ces informations et poss\u00e8dent tous la m\u00eame table de routage. Ainsi, chaque routeur peut trouver le chemin le plus court pour envoyer des donn\u00e9es \u00e0 travers le r\u00e9seau.</p> Routeur Lien Vitesse (Mbps) A AB 1000 A AE 10 B BA 1000 B BC 1000 C CB 1000 C CD 100 D DC 100 D DE 10 E ED 10 E EA 10 <p>Si on consid\u00e8re l'exemple pr\u00e9c\u00e9dent, le routeur A s\u00e9lectionnera le routeur B comme voie pour atteindre C et D. Il choisira par contre de rejoindre E par sa liaison directe avec lui, certes lente mais qui reste plus rapide que de passer par <code>B \u25ba C \u25ba D \u25ba E</code>.</p>"},{"location":"T3%20Architecture/2routage/#lalgorithme-de-dijkstra","title":"L'algorithme de Dijkstra","text":"<p>Pour d\u00e9terminer le plus court chemin, on utilise l'algorithme de Dijkstra !</p> <p>Question 6</p> <p>Un journaliste britannique d\u2019une revue consacr\u00e9e \u00e0 l\u2019automobile doit tester les autoroutes fran\u00e7aises. Pour remplir sa mission, il d\u00e9cide de louer une voiture et de circuler entre six grandes villes fran\u00e7aises : Bordeaux (B), Lyon (L),Marseille (M), Nantes (N), Paris (P) et Toulouse(T).</p> <p></p> <p>Le journaliste se trouve \u00e0 Nantes et d\u00e9sire se rendre le plus rapidement possible \u00e0 Marseille. D\u00e9terminer un trajet qui minimise son temps de parcours.</p> <p>D\u00e9rouler l'algorithme de Dijkstra sur cet exemple.</p>"},{"location":"T3%20Architecture/2routage/#le-protocole-ospf","title":"Le protocole OSPF","text":"<p>Le protocole OSPF pour Open Shortest Path First est un protocole \u00e0 \u00e9tat de lien, normalis\u00e9 en 1990, d\u00e9crit dans la RFC 2328. Il est pris en charge par le protocole IP. C\u2019est le protocole de routage interne dominant et il est support\u00e9 par la plupart des routeurs. Ce protocole attribue un co\u00fbt \u00e0 chaque lien entre les routeurs du r\u00e9seau. Le O du sigle OSPF signifie que sa sp\u00e9cification doit appartenir au domaine public et que toute solution propri\u00e9taire est exclue.</p> <p>L\u2019algorithme pour trouver la meilleure route est celui de Dijkstra qui fournit dans ce cas le co\u00fbt cumul\u00e9 le plus faible des liens de la route vers une destination d\u2019une zone donn\u00e9e. Le co\u00fbt utilis\u00e9 pour chaque lien doit \u00eatre inversement proportionnel \u00e0 la bande passante du lien en question. Ce co\u00fbt peut \u00eatre d\u00e9fini manuellement ou calcul\u00e9 avec la formule suivante :</p> \\[ \\text{Co\u00fbt} = \\frac{C}{ \\text{Bande passante} } \\] <p>Une constate \u00e0 bien d\u00e9finir</p> <p>La constante \\(C\\) est arbitraire. Elle peut valoir 10^8, 10^9 ou 10^10 selon la plus grande bande passante du r\u00e9seau. Par contre, il faut veiller \u00e0 utiliser la m\u00eame valeur pour tous les routeurs d'un m\u00eame r\u00e9seau. Ce choix est effectu\u00e9 afin que tous les co\u00fbts calcul\u00e9s soient des entiers positifs.</p> <p>Exemple</p> <p>En reprenant les bandes passantes donn\u00e9es dans le premier exemple, et avec une constante de \\(10^9\\) :</p> <ul> <li>1 Gbps a un co\u00fbt de \\(\\frac{10^9}{10^9} = 1\\)</li> <li>100 Mbps a un co\u00fbt de \\(\\frac{10^9}{100 \\times 10^6} = 10\\)</li> <li>10 Mbps a un co\u00fbt de \\(\\frac{10^9}{10 \\times 10^6} = 100\\)</li> </ul> <p>Ainsi une route \u00e0 10 Mbps est consid\u00e9r\u00e9e comme 100 fois plus \u00ab lente \u00bb qu'une liaison \u00e0 1 Gbps.</p> <p>Question 7</p> <p>Faire l'annale de bac suivante : Sujet 2021 - Exercice 5</p>"},{"location":"T3%20Architecture/3processus/","title":"Processus","text":""},{"location":"T3%20Architecture/3processus/#processus","title":"Processus","text":"<ul> <li>Cr\u00e9ation d'un processus</li> <li>Ordonnancement de plusieurs processus</li> <li>Risque de l'interblocage (deadlock)</li> </ul> Rappels de 1\u00e8re <p>Un programme, ou ex\u00e9cutable, est une suite d'instructions en langage machine, c'est-\u00e0-dire une suite d\u2019octets que le processeur est capable de d\u00e9coder et ex\u00e9cuter. Pour des facilit\u00e9s de lecture, on le traduit en langage assembleur, par exemple :</p> Code machine<pre><code>00011010\n00100010 \n00010011\n00000011\n01111000 \n</code></pre> Code assembleur<pre><code>LD A, (DE) \nLD (HL+), A \nINC DE \nDEC BC \nLD A, B \n</code></pre> <p>Lorsque ce programme est ex\u00e9cut\u00e9, l'OS le charge dans la RAM \u00e0 une certaine adresse et inscrit cette adresse dans le registre IP (Instruction Pointer) du processeur. Le processeur continue alors sa routine :</p> <ul> <li>R\u00e9cup\u00e9rer l'instruction \u00e0 ex\u00e9cuter en m\u00e9moire</li> <li>D\u00e9coder l'instruction (d\u00e9terminer dans la suite d'octets l'instruction \u00e0 effectuer)</li> <li>Ex\u00e9cuter l'instruction</li> </ul> <p>Ce cycle se r\u00e9p\u00e8te jusqu'\u00e0 l'arr\u00eat de la machine.</p>"},{"location":"T3%20Architecture/3processus/#definition","title":"D\u00e9finition","text":"<p>Lorsqu'un programme (fichier <code>.exe</code> sur Windows) est ex\u00e9cut\u00e9 sur un ordinateur, un (parfois plusieurs) processus est cr\u00e9e. Un processus comprend notamment :</p> <ul> <li>les instructions \u00e0 ex\u00e9cuter, c'est-\u00e0-dire le programme en lui-m\u00eame ;</li> <li>un espace m\u00e9moire reserv\u00e9 ;</li> <li>des permissions d'acc\u00e8s \u00e0 des  ressources ext\u00e9rieures (par exemple, un fichier en ouverture).</li> </ul> <p>Un processus est donc une instance d'ex\u00e9cution de ce programme. </p>"},{"location":"T3%20Architecture/3processus/#role-du-systeme-dexploitation","title":"R\u00f4le du syst\u00e8me d'exploitation","text":"<p>Un syst\u00e8me d'exploitation (Windows, Linux, MacOS etc.) capable de g\u00e9rer l'ex\u00e9cution de plusieurs processus est dit multit\u00e2ches. Sur les OS bas\u00e9s sur UNIX, la commande <code>top</code> (ou <code>ps</code>) permet de surveiller en temps r\u00e9el l'ensemble des processus en cours d'ex\u00e9cution sur la machine :</p> <p>Sur Windows, le gestionnaire de t\u00e2ches (accessible par le raccourci Ctrl+Alt+Del) r\u00e9alise le m\u00eame r\u00f4le.</p>"},{"location":"T3%20Architecture/3processus/#creation-dun-processus","title":"Cr\u00e9ation d'un processus","text":"<p>Un processus peut \u00eatre cr\u00e9e :</p> <ul> <li>Au d\u00e9marrage du syst\u00e8me</li> <li>Par un appel d'un autre processus</li> <li>Par l'utilisateur</li> </ul> <p>Lors de sa cr\u00e9ation, le syst\u00e8me d'exploitation attribue au processus un identifiant unique, appel\u00e9 PID (Process Identifier).  Si un processus parent cr\u00e9e un processus fils, l'OS attribue au processus fils, en plus de son PID, l'identifiant de son parent, appel\u00e9 PPID (Parent Process Identifier).</p> Pourquoi le PPID ? <p>Le PPID permet de hi\u00e9rarchiser les processus sous la forme d'un arbre de processus. Ainsi, si un processus parent est termin\u00e9, tous ses processus fils seront \u00e9galement termin\u00e9s, et donc par r\u00e9cursion, toute sa descendance.</p> <p> </p> <p>Certaines commandes permettent de visualiser facilement cet arbre. Ici, on peut voir une partie des processus ex\u00e9cut\u00e9s lorsque que j'utilise mon IDE pr\u00e9f\u00e9r\u00e9 VSCode.</p>"},{"location":"T3%20Architecture/3processus/#les-3-etats-dun-processus","title":"Les 3 \u00e9tats d'un processus","text":"<p>On rappelle qu'un processeur ne peut traiter qu'une seule instruction \u00e0 la fois. Autrement dit, on ne peux ex\u00e9cuter qu'un seul processus \u00e0 la fois. Pour donner l'illusion de simultan\u00e9it\u00e9 d'ex\u00e9cution, les processus se partagent le processeur \u00e0 tour de r\u00f4le. Ainsi un processus est soit dans l'\u00e9tat pr\u00eat, soit dans l'\u00e9tat \u00e9lu :</p> <p>Les processus doivent aussi se partager des ressources ext\u00e9rieures comme la m\u00e9moire, le clavier, les fichiers, l'imprimante etc. Lorsqu'un processus a besoin d'une de ces ressources et qu'elle n'est pas disponible, en attendant qu'elle le soit, il lib\u00e8re le processeur et passe en \u00e9tat bloqu\u00e9.</p> Question <p>Soit le programme Python suivant :</p> <pre><code>age = input('Votre \u00e2ge ?')\nage += 1\nprint(f'Bon anniversaire ! Vous avez {age} ans !')\nsleep(1)\nprint('Vous \u00eates maintenant un peu plus vieux !')\nfichier = open('codes_nucl\u00e9aires.txt')\nprint(fichier.readlines())\nfichier.close()\n</code></pre> <p>Lorsqu'on ex\u00e9cute ce programme, un processus est cr\u00e9e, mais \u00e0 quel moment passe-t-il dans l'\u00e9tat bloqu\u00e9 ?</p>"},{"location":"T3%20Architecture/3processus/#les-interruptions-sytemes","title":"Les interruptions syt\u00e8mes","text":"<p>Si un programme est en cours d'ex\u00e9cution sur un processeur, ce dernier ex\u00e9cutera b\u00eatement chaque instruction jusqu'\u00e0 la derni\u00e8re. Alors, comment le syst\u00e8me d'exploitation parvient-il \u00e0 reprendre la main ?</p> <p>Gr\u00e2ce \u00e0 un m\u00e9canisme appell\u00e9e interruption (ou signal) ! Le processeur suspend temporairement le programme en cours lorsqu'une interruption se produit, permettant au syst\u00e8me d'exploitation d'intervenir. Une fois termin\u00e9, le programme reprend l\u00e0 o\u00f9 il s'\u00e9tait arr\u00eat\u00e9.</p> <p>Une interruption peut \u00eatre d\u00e9clench\u00e9e par diff\u00e9rentes actions, comme une touche press\u00e9e sur le clavier, une \u00e9criture termin\u00e9e sur le disque dur, ou la r\u00e9ception d'un paquet par la carte r\u00e9seau. Parmi elles, il y a les interruptions d'horloge, qui se produisent \u00e0 intervalles r\u00e9guliers (environ toutes les 100 ns aujourd'hui) et permettent l'ex\u00e9cution de programmes de mani\u00e8re concurrente.</p>"},{"location":"T3%20Architecture/3processus/#le-veritable-chef-dorchestre-lordonnanceur","title":"Le v\u00e9ritable chef d'orchestre : l'ordonnanceur","text":"<p>Bien, nous avons plusieurs processus en attente d'ex\u00e9cution. Comment l'OS d\u00e9termine le prochain processus \u00e0 \u00e9lire ? Et combien de temps d'ex\u00e9cution lui allouer ? C'est le r\u00f4le de l'ordonnanceur de r\u00e9pondre \u00e0 ces probl\u00e9matiques.</p> <p>Que faut-il faire ?</p> <ul> <li>Traiter le processus le plus prioritaire ?</li> <li>ou le plus rapide d'abord ?</li> <li>ou dans l'ordre o\u00f9 ils ont \u00e9t\u00e9 cr\u00e9es ?</li> <li>ou \u00e0 tour de r\u00f4le chacun pendant un temps fixe ?</li> </ul>"},{"location":"T3%20Architecture/3processus/#exemple","title":"Exemple","text":"<p>Supposons qu'un processeur doive traiter quatre processus nomm\u00e9s A, B, C et D, chacun ayant des temps d'ex\u00e9cution diff\u00e9rents et se pr\u00e9sentant \u00e0 diff\u00e9rents instants au processeur :</p> Processus Cycle de cr\u00e9ation Dur\u00e9e en cycles A 0 5 B 1 3 C 3 2 D 5 4 <p>\u00c9tant donn\u00e9 que le processeur ne peut traiter qu'un processus \u00e0 la fois, il est n\u00e9cessaire de les ordonner de mani\u00e8re \u00e0 \u00e9viter les chevauchements. Voici quelques strat\u00e9gie d'ordonnancement :</p> <p> </p> <p>Cette m\u00e9thode repose sur le principe \u00ab Premier Arriv\u00e9, Premier Servi \u00bb ou FIFO. C'est un ordonnanceur non-pr\u00e9emtif car un processus est ex\u00e9cut\u00e9 de bout en bout.</p> <p> </p> <p>La m\u00e9thode Short Job First (SJF) consiste \u00e0 choisir le processus en attente qui sera le plus rapide \u00e0 terminer. Elle est non-pr\u00e9emtive.</p> <p> </p> <p>La m\u00e9thode Shortest Remaining Time (SRT) est une version pr\u00e9emptive de l\u2019algorithme Shortest Job First (SJF). Lorsqu\u2019un nouveau processus arrive dans la file d\u2019attente, l'ordonnanceur compare sa dur\u00e9e d'ex\u00e9cution estim\u00e9 avec celui du processus actuellement en cours d'ex\u00e9cution. Si le temps restant du nouveau processus est plus court, ce dernier prend imm\u00e9diatement la place du processus en cours. C'est un ordonnanceur pr\u00e9emptif car un processus peut \u00eatre interrompu pour permettre l'ex\u00e9cution d'un autre processus.</p> <p>La m\u00e9thode Round Robin (RR), ou algorithme du tourniquet, sera en exercice.</p> <p>Pour comparer ces algorithmes, on peut mesurer :</p> <ul> <li> <p>La moyenne du temps de s\u00e9jour pour chaque processus. Le temps de s\u00e9jour est le d\u00e9lai entre le temps d'arriv\u00e9e et le temps de terminaison d'un processus.</p> </li> <li> <p>La moyenne du temps d'attente pour chaque processus. Le temps d'attente est la diff\u00e9rence entre le temps de s\u00e9jour et la dur\u00e9e totale du processus.</p> </li> </ul> <p>Par exemple, pour la m\u00e9thode SRT :</p> Processus Temps de s\u00e9jour Temps d'attente A \\(10 - 0 = 10\\) \\(10 - 5 = 5\\) B \\(4 - 1 = 3\\) \\(3 - 3 = 0\\) C \\(6 - 3 = 3\\) \\(3 - 2 = 1\\) D \\(14 - 5 = 9\\) \\(9 - 4 = 5\\) <p>Ainsi le temps de s\u00e9jour moyen est de \\(6.25\\) et le temps d'attente moyen de \\(2.75\\).</p> Question <p>Faites-en de m\u00eame pour les m\u00e9thodes PAPS et SJF. Dresser ensuite un tableau pour comparer ces m\u00e9thodes.</p>"},{"location":"T3%20Architecture/3processus/#interblocage","title":"Interblocage","text":"<p>Comme nous venons de le voir, un processus peut \u00eatre dans l'\u00e9tat bloqu\u00e9 dans l'attente de la lib\u00e9ration d'une ressource.</p> <p>Ces ressources (l'acc\u00e8s en \u00e9criture \u00e0 un fichier...) ne peuvent \u00eatre donn\u00e9es \u00e0 deux processus \u00e0 la fois. Des processus souhaitant acc\u00e9der \u00e0 cette ressource sont donc en concurrence sur cette ressource. Un processus peut donc devoir attendre qu'une ressource se lib\u00e8re avant de pouvoir y acc\u00e9der (et ainsi passer de l'\u00e9tat bloqu\u00e9 \u00e0 l'\u00e9tat pr\u00eat). Mais une situation g\u00eanante peut apppara\u00eetre :</p>"},{"location":"T4%20Base%20de%20donn%C3%A9es/1sql/","title":"Le langage SQL","text":""},{"location":"T4%20Base%20de%20donn%C3%A9es/1sql/#le-langage-sql","title":"Le langage SQL","text":"<p>Liens Capytale</p> <ul> <li>Requ\u00eates SQL simples :  Notebook Capytale 162d-1816379</li> <li>Les jointures :  Notebook Capytale 078b-2687034</li> <li>Cr\u00e9ation et mise \u00e0 jour de tables :  Notebook Capytale 7b83-2715803</li> <li>Un crime \u00e0 SQL City \ud83d\udd75\ufe0f :  Notebook Capytale 7351-2739806</li> </ul>"},{"location":"T4%20Base%20de%20donn%C3%A9es/1sql/#synthese-sql","title":"Synth\u00e8se SQL","text":"<ul> <li> <p>R\u00e9cup\u00e9rer des donn\u00e9es d'une table :</p> <pre><code>SELECT colonne, autre_colonne, ...\nFROM nom_table\nWHERE condition AND/OR autre_condition AND/OR ...\nORDER BY colonne ASC/DESC\n</code></pre> </li> <li> <p>R\u00e9cup\u00e9rer des donn\u00e9es de plusieurs tables (jointure) :</p> <pre><code>SELECT table1.colonne, table2.colonne, ...\nFROM table1\nJOIN table2 ON table1.id = table2.id\nJOIN table3 ON table2.id = table3.id\n...\nWHERE condition(s)\nORDER BY colonne ASC/DESC\n</code></pre> </li> <li> <p>Ajouter une ligne :</p> <pre><code>INSERT INTO nom_table\nVALUES (valeur1, valeur2, ...)\n</code></pre> </li> <li> <p>Mettre \u00e0 jour une ou des lignes :</p> <pre><code>UPDATE nom_table\nSET colonne = valeur_ou_expression, \n    autre_colonne = valeur_ou_expression, \n    ...\nWHERE condition(s)\n</code></pre> </li> <li> <p>Supprimer une ou des lignes :</p> <pre><code>DELETE FROM nom_table\nWHERE condition(s)\n</code></pre> </li> </ul>"},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/","title":"Le mod\u00e8le relationnel","text":""},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/#le-modele-relationnel","title":"Le mod\u00e8le relationnel","text":""},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/#definition-et-exemple","title":"D\u00e9finition et exemple","text":"<p>On consid\u00e8re la table suivante :</p> Titre Auteur Ann\u00e9e Note ISBN 1984 George Orwell 1949 8.3 978-2070368228 Dune Frank Herbert 1965 8.1 978-2221249482 Fondation Isaac Asimov 1951 8.1 978-2070415700 Le Meilleur des mondes Aldous Huxley 1931 7.6 978-2266128568 Fahrenheit 451 Ray Bradbury 1953 7.7 978-1451673319 Table <code>Livres</code> <ul> <li> <p>Le mod\u00e8le relationnel s\u00e9pare les donn\u00e9es dans plusieurs tables appel\u00e9es relations.</p> <p><code>Livres</code> est une relation.</p> </li> <li> <p>Le nom d'une colonne d'une relation est appel\u00e9 attribut.</p> <p><code>Titre</code> est un attribut de la relation <code>Livres</code>.</p> </li> <li> <p>Le domaine d'un attribut correspond \u00e0 un ensemble de valeurs admissibles : il correspond g\u00e9n\u00e9ralement \u00e0 son type. </p> <p>L'attribut <code>Note</code> de type <code>Float</code> a comme domaine l'ensemble des r\u00e9els compris entre 0 et 10.</p> </li> <li> <p>Une ligne d'une relation est appel\u00e9 \u00e9l\u00e9ment, enregistrement, entit\u00e9 ou n-uplet. </p> <p>Dans la relation <code>Livres</code>, <code>(\"1984\", \"George Orwell\", 1949, 8.3, \"978-2070368228\")</code> est un \u00e9l\u00e9ment / enregistrement / entit\u00e9 / n-uplet. </p> </li> <li> <p>Le nombre d'entit\u00e9s d'une relation <code>R</code> est appel\u00e9 cardinal, not\u00e9 <code>#R</code>.</p> <p><code>#Livres</code> = 5.</p> </li> <li> <p>Le sch\u00e9ma d'une relation est l'ensemble ordonn\u00e9 de ses attributs sous la forme suivante :</p> <p><code>Livres(Titre: String, Auteur: String, Ann\u00e9e: Int, Note: Float, ISBN: String)</code></p> </li> <li> <p>Lorsqu'une base de donn\u00e9es contient plusieurs relations, l'ensemble des sch\u00e9mas des relations constitue le sch\u00e9ma relationnel de la base de donn\u00e9es.</p> </li> </ul>"},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/#cles-primaires-et-etrangeres","title":"Cl\u00e9s primaires et \u00e9trang\u00e8res","text":"<p>Les cl\u00e9s primaires et \u00e9trang\u00e8res sert \u00e0 \u00e9tablir des relations entres les diff\u00e9rentes tables.</p> <ul> <li> <p>Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique une entit\u00e9. Dans le sch\u00e9ma d'une relation, l'attribut qui correspond \u00e0 la cl\u00e9 primaire est soulign\u00e9.</p> <p><code>Livres(Titre: String, Auteur: String, Ann\u00e9e: Int, Note: Float, ISBN: String)</code></p> <p>Si on ne dispose pas d'attribut pouvant servir de cl\u00e9 primaire, il est courant d'ajouter un num\u00e9ro d'identifiant <code>id</code> comme cl\u00e9 primaire.</p> </li> <li> <p>Une cl\u00e9 \u00e9trang\u00e8re (ou secondaire) est un attribut qui fait r\u00e9f\u00e9rence \u00e0 une cl\u00e9 primaire d'une autre relation. Dans le sch\u00e9ma d'une relation, l'attribut qui correspond \u00e0 une cl\u00e9 \u00e9trang\u00e8re est pr\u00e9c\u00e9d\u00e9 d'un <code>#</code> ou soulign\u00e9 en pointill\u00e9.</p> <p><code>Emprunt(#ISBN: String, #id_client: Int, retour: Date)</code></p> <p>Une cl\u00e9 \u00e9trang\u00e8re peut aussi \u00eatre une cl\u00e9 primaire !</p> </li> </ul>"},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/#contraintes-dintegrite","title":"Contraintes d'int\u00e9grit\u00e9","text":"<p>Les trois contraintes d'int\u00e9grit\u00e9 assurent la coh\u00e9rence des donn\u00e9es :</p> <ul> <li> <p>Contrainte de relation : chaque entit\u00e9 est identifi\u00e9e de mani\u00e8re unique \u00e0 l'aide d'une cl\u00e9 primaire.</p> </li> <li> <p>Contrainte de domaine : les valeurs d'un attribut sont restreintes \u00e0 un domaine pr\u00e9d\u00e9fini de valeurs.</p> </li> <li> <p>Contrainte de r\u00e9f\u00e9rence : la valeur d\u2019une cl\u00e9 \u00e9trang\u00e8re doit toujours \u00eatre \u00e9galement une des valeurs de la cl\u00e9 r\u00e9f\u00e9renc\u00e9e.</p> </li> </ul>"},{"location":"T4%20Base%20de%20donn%C3%A9es/2rela/#normalisation","title":"Normalisation","text":"<p>En plus des contraintes d'int\u00e9grit\u00e9, lors de sa conception, une base de donn\u00e9es doit respecter certains principes afin de pr\u00e9venir l\u2019apparition d'anomalies : on parle de normalisation de la base de donn\u00e9es. Parmi ces principes :</p> <ul> <li> <p>Principe de non-redondance des donn\u00e9es : les donn\u00e9es ne doivent pas appara\u00eetre plusieurs fois.</p> </li> <li> <p>Principe d'atomicit\u00e9 des donn\u00e9es : les donn\u00e9es doivent \u00eatre ins\u00e9cables (pas de tableaux par exemple).</p> </li> </ul>"},{"location":"T5%20Langages%20et%20programmation/1arret/","title":"Calculabilit\u00e9 et d\u00e9cidabilit\u00e9","text":""},{"location":"T5%20Langages%20et%20programmation/1arret/#calculabilite-et-decidabilite","title":"Calculabilit\u00e9 et d\u00e9cidabilit\u00e9","text":""},{"location":"T5%20Langages%20et%20programmation/1arret/#le-probleme-de-larret","title":"Le probl\u00e8me de l'arr\u00eat","text":"<p> Diaporama sur le probl\u00e8me de l'arr\u00eat</p>"},{"location":"T5%20Langages%20et%20programmation/2rec/","title":"R\u00e9cursivit\u00e9","text":""},{"location":"T5%20Langages%20et%20programmation/2rec/#recursivite","title":"R\u00e9cursivit\u00e9","text":"<p>Liens Capytale</p> <ul> <li>Exercices :  Notebook Capytale d7ca-1776728</li> <li>Correction : Disponible plus tard !</li> </ul>"},{"location":"T5%20Langages%20et%20programmation/2rec/#synthese","title":"Synth\u00e8se","text":"<ul> <li> <p>Une fonction est dite r\u00e9cursive si elle s'appelle elle-m\u00eame au cours de son ex\u00e9cution.</p> Exemple de fonction r\u00e9cursive<pre><code>def factorielle(n):\n    if n == 0:  # condition terminale\n        return 1\n    return n * factorielle(n - 1)  # factorielle s'appelle elle-m\u00eame\n</code></pre> </li> <li> <p>La condition terminale, situ\u00e9e au d\u00e9but de toute fonction r\u00e9cursive, d\u00e9finit le cas de base et permet d'arr\u00eater la cha\u00eene des appels.</p> </li> <li> <p>Si un programme r\u00e9cursif peut se traduire dans un style imp\u00e9ratif (avec de simples boucles) et inversement, aborder de mani\u00e8re r\u00e9cursive un probl\u00e8me est parfois plus facile. </p> <p></p> Style r\u00e9cursif<pre><code>def factorielle(n):\n    if n == 0:\n        return 1\n    return n * factorielle(n - 1)\n</code></pre> Style imp\u00e9ratif<pre><code>def factorielle(n):\n    produit = 1\n    for facteur in range(1, n + 1):\n        produit *= facteur\n    return produit\n</code></pre> </li> <li> <p>On peut correspondre le concept de r\u00e9cursivit\u00e9 \u00e0 celui de r\u00e9currence en math\u00e9matiques.</p> </li> <li> <p>Lorsque \\(f\\) s'appelle elle-m\u00eame, on parle de r\u00e9cursivit\u00e9 directe. Lorsque \\(f\\) appelle \\(g\\) qui appelle \\(f\\), on parle de r\u00e9cursivit\u00e9 indirecte.</p> </li> <li> <p>Il est possible de visualiser l'ordre des appels r\u00e9cursifs gr\u00e2ce \u00e0 un arbre d'appels : </p> <p></p> Somme r\u00e9cursive<pre><code>def somme(n):\n    if n == 0:  # condition terminale\n        return 0\n    else:\n        return n + somme(n - 1)\n</code></pre> <p></p> Suite de Fibonacci<pre><code>def f(n):\n    if n &lt;= 1:  # condition terminale\n        return n\n    return f(n - 1) + f(n - 2)\n</code></pre> </li> </ul>"},{"location":"T5%20Langages%20et%20programmation/3api/","title":"Modularit\u00e9 et API","text":""},{"location":"T5%20Langages%20et%20programmation/3api/#modularite-et-api","title":"Modularit\u00e9 et API","text":""},{"location":"T5%20Langages%20et%20programmation/3api/#objectifs","title":"Objectifs","text":"<ul> <li> <p>Utiliser des API ou des biblioth\u00e8ques.</p> </li> <li> <p>Exploiter leur documentation.</p> </li> <li> <p>Cr\u00e9er des modules simples et les documenter.</p> </li> </ul>"},{"location":"T5%20Langages%20et%20programmation/3api/#definition-de-modularite","title":"D\u00e9finition de modularit\u00e9","text":"<p>La modularit\u00e9 en programmation se r\u00e9f\u00e8re \u00e0 la d\u00e9composition d'un programme en modules autonomes et interd\u00e9pendants. Un module est une unit\u00e9 logique qui regroupe des fonctionnalit\u00e9s sp\u00e9cifiques. Cette approche facilite la gestion, la maintenance, et la r\u00e9utilisation du code.</p> Le module <code>math</code> <p>Le module <code>math</code> est un excellent exemple de modularit\u00e9. Il regroupe un ensemble de fonctions math\u00e9matiques standards, telles que les fonctions trigonom\u00e9triques, logarithmiques, etc. Les d\u00e9veloppeurs peuvent l'importer et l'utiliser dans leurs programmes, profitant ainsi des fonctionnalit\u00e9s pr\u00eates \u00e0 l'emploi sans avoir \u00e0 r\u00e9inventer la roue.</p> Import completImport complet avec aliasImport partiel dans le namespace courantImport complet dans le namespace courant <pre><code>import math\n\nprint(math.sqrt(25)) \nprint(math.sin(math.pi))\n</code></pre> <p>Toutes les fonctions du module <code>math</code> sont import\u00e9es, et elles sont accessibles dans un namespace sp\u00e9cifique. Les fonctions sont appel\u00e9es en les pr\u00e9fixant par le nom du module, c'est-\u00e0-dire <code>math</code>.</p> <pre><code>import math as m\n\nprint(m.sqrt(25)) \nprint(m.sin(m.pi))\n</code></pre> <p>Similaire \u00e0 l'import complet, mais les fonctions du module sont appel\u00e9es en les pr\u00e9fixant par l'alias du module, ici <code>m</code>.</p> <pre><code>from math import sqrt, sin\n\nprint(sqrt(25)) \nprint(sin(pi))\n</code></pre> <p>Seules les fonctions <code>sqrt</code> et <code>sin</code> sont import\u00e9es, directement dans le namespace principal du fichier effectuant l'import. Les autres fonctions du module <code>math</code> ne sont pas accessibles, comme <code>cos</code> par exemple.</p> <pre><code>from math import *\n\nprint(sqrt(25)) \nprint(sin(pi))\nprint(cos(pi))\n</code></pre> <p>En informatique, <code>*</code> signifie souvent \u00ab tout \u00bb. Toutes les fonctions sont import\u00e9es directement dans l'espace de nom principal du fichier effectuant l'import. Cependant, cette m\u00e9thode d'importation peut entra\u00eener des conflits (fonctions ayant le m\u00eame nom), il convient donc de l'utiliser avec pr\u00e9caution.</p>"},{"location":"T5%20Langages%20et%20programmation/3api/#votre-premier-module","title":"Votre premier module","text":""},{"location":"T5%20Langages%20et%20programmation/3api/#un-exemple","title":"Un exemple","text":"<p>Dans un script Python <code>mon_module.py</code>, on d\u00e9finit les fonctions suivantes :</p> mon_module.py<pre><code>def celsius_vers_fahrenheit(T_celsius: float) -&gt; float:\n    \"\"\"\n    Convertit une temp\u00e9rature degr\u00e9s Celsius en degr\u00e9s Fahrenheit.\n\n    Param\u00e8tres :\n    - T_celsius (float) : Temp\u00e9rature en degr\u00e9s Celsius \u00e0 convertir.\n\n    Retourne :\n    - float : Temp\u00e9rature convertie en degr\u00e9s Fahrenheit.\n    \"\"\"\n    return T_celsius * 9 / 5 + 32\n\n\ndef fahrenheit_vers_celsius(T_fahrenheit: float) -&gt; float:\n    \"\"\"\n    Convertit une temp\u00e9rature degr\u00e9s Fahrenheit en degr\u00e9s Celsius.\n\n    Param\u00e8tres :\n    - T_fahrenheit (float) : Temp\u00e9rature en degr\u00e9s Fahrenheit \u00e0 convertir.\n\n    Retourne :\n    - float : Temp\u00e9rature convertie en degr\u00e9s Celsius.\n    \"\"\"\n    return (T_fahrenheit - 32) * 5 / 9\n</code></pre> <p>Dans un second script Python <code>test.py</code> cr\u00e9e dans le m\u00eame r\u00e9pertoire, on pourra alors importer les fonctions de ce module gr\u00e2ce \u00e0 <code>import nom_du_module</code> :</p> test.py<pre><code>import mon_module\n\nprint(mon_module.celsius_vers_fahrenheit(42.0))\nprint(mon_module.fahrenheit_vers_celsius(50.0))\n</code></pre> Sortie<pre><code>107.6\n10.0\n</code></pre>"},{"location":"T5%20Langages%20et%20programmation/3api/#exercice-lart-de-la-guerre","title":"Exercice - L'art de la guerre","text":"<p>Cr\u00e9er un module <code>polynome2</code> qui d\u00e9finit une classe <code>Polynome2</code> repr\u00e9sentant un polyn\u00f4me du second degr\u00e9. Un objet de cette classe poss\u00e9dera trois attributs <code>a</code>, <code>b</code> et <code>c</code>, \u00e0 savoir les trois coefficients r\u00e9els du polyn\u00f4me \\(ax^2 + bx + c\\). Impl\u00e9menter les m\u00e9thodes suivantes :</p> <ul> <li> <p><code>\u00e9valuer(self, x: float) -&gt; float</code> qui \u00e9value le polyn\u00f4me \u00e0 un <code>x</code> sp\u00e9cifique.</p> </li> <li> <p><code>discriminant(self) -&gt; float</code> qui renvoie le discriminant \\(\\Delta\\) du polyn\u00f4me. Pour rappel :</p> \\[ \\Delta = b^2 - 4ac \\] </li> <li> <p><code>racines(self) -&gt; tuple[float, float]</code> qui renvoie les deux racines r\u00e9elles du polyn\u00f4me dans l'ordre croissant. Pour rappel :</p> \\[ r_{1, 2} = \\frac{-b \\pm \\sqrt \\Delta}{2a} \\] <p>Les racines sont les valeurs \\(x\\) telles que \\(ax^2 + bx + c = 0\\). La m\u00e9thode renvoie <code>None</code> s'il n'existe pas de racines r\u00e9elles, c'est-\u00e0-dire lorsque le discriminant du polyn\u00f4me est n\u00e9gatif.</p> </li> <li> <p><code>extremum(self)</code> qui renvoie le maximum (respectivement minimum) du polyn\u00f4me si \\(a &gt; 0\\) (resp. \\(a &lt; 0\\)). Renvoie <code>None</code> si \\(a = 0\\). Pour vous aider :</p> </li> </ul> <p></p> <ul> <li><code>distance_racines(self) -&gt; float</code> renvoie la distance absolue entre les deux racines.</li> </ul> <p>N'oubliez pas de bien documenter vos m\u00e9thodes !</p> <p>Louis XIV souhaite utiliser votre nouveau module pour calculer la trajectoire de ses armes de jet sur le champ de bataille. Il vient vous voir avec les fonctions d\u00e9crivant la trajectoire parabolique des projectiles de plusieurs armes :</p> Arme \u00c9quation de la trajectoire Arc \\(\u22120.06x^2 + 20x + 1.6\\) Tr\u00e9buchet \\(\u22120.1x\u00b2 + 70x + 1.0\\) Catapulte \\(\u22120.05x\u00b2 + 18x + 0.5\\) Fronde \\(\u22120.1x^2 + 5x + 1.8\\) <p>Dans un nouveau fichier Python <code>test_armes.py</code> importer votre module <code>polynome2</code> et calculer la port\u00e9e et la fl\u00e8che de chacune des armes :</p> <p></p>"},{"location":"T5%20Langages%20et%20programmation/3api/#definition-dune-api","title":"D\u00e9finition d'une API","text":"<p>Une API, Application Programming Interface, est un moyen pour deux programmes informatiques ou plus de communiquer entre eux. Une API expose un ensemble normalis\u00e9 de classes, de m\u00e9thodes, de fonctions et de constantes qui sert de fa\u00e7ade par laquelle un logiciel offre des services \u00e0 d'autres logiciels. </p> <p>Typiquement les diff\u00e9rentes m\u00e9thodes de votre classe <code>polynome2</code> d\u00e9finissent une API !</p>"},{"location":"T5%20Langages%20et%20programmation/3api/#une-premiere-api-web","title":"Une premi\u00e8re API Web","text":"<p>On se propose d'utiliser l'API Web OpenWeather qui fournit des donn\u00e9es m\u00e9t\u00e9orologiques en temps r\u00e9el et bien plus. Inscrivez-vous pour obtenir une cl\u00e9 API qui vous autorisera \u00e0 utiliser cet API.</p> <p>Sur le site, OpenWeather expose diff\u00e9rents APIs, comme l'API Geocoding qui permet de d\u00e9terminer la latitude et longitude d'une ville. Pour appeler cette API en Python, on utilise le module <code>requests</code> pour effectuer une requ\u00eate HTTP et le module <code>json</code> pour convertir les donn\u00e9es re\u00e7ues en un dictionnaire. Le module <code>pprint</code> permet d'afficher plus lisiblement des dictionnaires :</p> <pre><code>import requests\nimport json\nfrom pprint import pprint\n\nAPI_KEY = 'd2902337c4a97a1d8fc513d7ab......'  # me demander le reste de la cl\u00e9\ncity_name = 'Pons'\n\nresponse = requests.get(f'http://api.openweathermap.org/geo/1.0/direct?q={city_name}&amp;appid={API_KEY}')\ndata = json.loads(response.text)\n\npprint(data)\n</code></pre> <p>Finalement, tout se passe comme si on appelait une fonction d'un module ext\u00e9rieure, les diff\u00e9rents param\u00e8tres sont pass\u00e9s directement dans l'URL.</p> <p>Exercice</p> <p>\u00c9crire la fonction <code>coordonn\u00e9es(ville: str) -&gt; tuple[float, float]</code> qui renvoie la latitude et la longitude de ville <code>ville</code> donn\u00e9e en param\u00e8tre. (note: <code>API_KEY</code> sera une variable globale)</p>"},{"location":"T5%20Langages%20et%20programmation/3api/#le-temps-est-bon-le-ciel-et-bleu","title":"Le temps est bon, le ciel et bleu","text":"<p>Ce projet a pour but d'\u00e9crire le code Python qui affiche le bulletin m\u00e9t\u00e9o des trois prochains jours de mani\u00e8re \u00e9l\u00e9gante d'une ville donn\u00e9e :</p> <pre><code>     Bulletin m\u00e9t\u00e9o de Pons en France\n\n\u2503          Mercredi 6 D\u00e9cembre 2023\n\u2503\n\u2503 \u2022 Temp\u00e9rature\n\u2503     \u2013 Maximale             : 5.63  \u00b0C\n\u2503     \u2013 Moyenne              : 2.93  \u00b0C\n\u2503     \u2013 Minimale             : -2.03 \u00b0C\n\u2503 \u2022 Humidit\u00e9 moyenne         : 89.8%\n\u2503 \u2022 Vitesse moyenne du vent  : 8.68 km/h\n\u2503 \u2022 Pression moyenne         : 1018.4 hPa\n\n\n\u2503           Jeudi 7 D\u00e9cembre 2023\n\u2503\n\u2503 \u2022 Temp\u00e9rature\n\u2503     \u2013 Maximale             : 11    \u00b0C\n\u2503     \u2013 Moyenne              : 6.28  \u00b0C\n\u2503     \u2013 Minimale             : 3.36  \u00b0C\n\u2503 \u2022 Humidit\u00e9 moyenne         : 84.75%\n\u2503 \u2022 Vitesse moyenne du vent  : 18.49 km/h\n\u2503 \u2022 Pression moyenne         : 1012.88 hPa\n\n\n\u2503          Vendredi 8 D\u00e9cembre 2023\n\u2503\n\u2503 \u2022 Temp\u00e9rature\n\u2503     \u2013 Maximale             : 12.86 \u00b0C\n\u2503     \u2013 Moyenne              : 10.46 \u00b0C\n\u2503     \u2013 Minimale             : 9.35  \u00b0C\n\u2503 \u2022 Humidit\u00e9 moyenne         : 85.75%\n\u2503 \u2022 Vitesse moyenne du vent  : 14.58 km/h\n\u2503 \u2022 Pression moyenne         : 1013.0 hPa\n</code></pre>"},{"location":"T5%20Langages%20et%20programmation/3api/#demarche-et-outils","title":"D\u00e9marche et outils","text":"<ul> <li> <p>L'API 5 Day / 3 Hour Forecast dont la documentation en anglais sera \u00e0 lire pour r\u00e9cup\u00e9rer les donn\u00e9es m\u00e9t\u00e9orologiques sur les prochains jours. Il faudra ensuite filtrer ces donn\u00e9es pour r\u00e9cup\u00e9rer ce que l'on souhaite.</p> </li> <li> <p>Le module <code>datetime</code> qui permettra de manipuler facilement les dates.</p> </li> <li> <p>Pour arrondir des nombres, centrer du texte etc. on utilisera les f-strings de mani\u00e8re un peu plus avanc\u00e9e.</p> </li> </ul> Le module <code>datetime</code> <ul> <li> <p>La classe <code>datetime.date</code> permet de repr\u00e9senter une date (jour, mois, ann\u00e9e) et de la manipuler facilement. Par exemple, <code>datetime.date.today()</code> renvoie la date actuelle sour la forme d'un objet de type <code>datetime.date</code> :</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.date.today()\ndatetime.date(2023, 12, 11)\n&gt;&gt;&gt; d = datetime.date(2024, 4, 6)  # 6 Avril 2024\n</code></pre> </li> <li> <p>La classe <code>datetime.timedelta</code> repr\u00e9sente une dur\u00e9e, soit un \u00e9cart entre deux objets de <code>datetime.date</code> :</p> <pre><code>&gt;&gt;&gt; datetime.date(2023, 12, 25) + datetime.timedelta(days=1)\ndatetime.date(2023, 12, 26)\n</code></pre> </li> <li> <p>Une instance de <code>datetime.date</code> se convertit en cha\u00eene de caract\u00e8res gr\u00e2ce \u00e0 <code>date.strftime(format)</code> ou <code>format</code> est une cha\u00eene de caract\u00e8res qui repr\u00e9sente la mise en forme souhait\u00e9e :</p> <pre><code>&gt;&gt;&gt; d = datetime.date(2023, 12, 25)\n&gt;&gt;&gt; d.strftime('%d / %m / %Y')\n'25 / 12 / 2023'\n</code></pre> <p>Rendez-vous sur ce lien pour conna\u00eetre tous les formatages possibles.</p> </li> <li> <p>Pour que <code>date.strftime</code> \u00ab parle \u00bb fran\u00e7ais, il faudra sp\u00e9cifier la constante <code>LC_TIME</code> au d\u00e9but de votre programme :</p> <pre><code>import locale\nlocale.setlocale(locale.LC_TIME, 'fr_FR')\n</code></pre> </li> <li> <p>La m\u00e9thode <code>datetime.date.fromtimestamp</code> sera tr\u00e8s utile pour r\u00e9cup\u00e9rer la date depuis les donn\u00e9es m\u00e9t\u00e9orologiques.</p> </li> </ul> Formatage avanc\u00e9 <ul> <li> <p>Il est courant d'ins\u00e9rer des valeurs dans une cha\u00eene de caract\u00e8res en d\u00e9finissant une f-string :</p> <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; f\"La variable a contient la valeur {a} !\"\n'La variable a contient la valeur 42 !'\n</code></pre> </li> <li> <p>On peut sp\u00e9cifier en plus d'autres param\u00e8tres, comme le nombre de chiffres apr\u00e8s la virgule \u00e0 afficher :</p> <pre><code>&gt;&gt;&gt; a = 10.123456789\n&gt;&gt;&gt; f\"La variable a contient la valeur {a:.3} !\"\n'La variable a contient la valeur 10.123 !'\n</code></pre> </li> <li> <p>Rendez-vous sur ce lien pour en savoir plus, surtout au niveau des alignements par exemple !</p> </li> </ul>"},{"location":"T5%20Langages%20et%20programmation/3api/#specifications","title":"Sp\u00e9cifications","text":"<ul> <li> <p>Le bulletin m\u00e9t\u00e9o des 3 prochains jours (pas aujourd'hui).</p> </li> <li> <p>Pour chaque jour :</p> <ul> <li> <p>Afficher correctement la date comme dans l'exemple.</p> </li> <li> <p>Donner la temp\u00e9rature maximale, moyenne et minimale en degr\u00e9 Celsius.</p> </li> <li> <p>Donner l'humidit\u00e9 moyenne.</p> </li> <li> <p>Donner la vitesse moyenne du vent en km/h.</p> </li> <li> <p>Donner la pression moyenne en hPa.</p> </li> </ul> </li> <li> <p>D\u00e9composer votre programme en fonctions sp\u00e9cifiques et pertinentes pour rendre le code plus intelligible.</p> </li> <li> <p>Ne pas oublier les commentaires (pour chaque fonction) et d'utiliser des noms de variables pertinents.</p> </li> </ul>"},{"location":"T6%20Algorithmique/3dac/","title":"Diviser pour r\u00e9gner","text":""},{"location":"T6%20Algorithmique/3dac/#diviser-pour-regner","title":"Diviser pour r\u00e9gner","text":"<p>Liens Capytale</p> <ul> <li>TP Tri Fusion :  Notebook Capytale b99a-2247717</li> <li>Correction : Disponible plus tard !</li> <li>TP Les points les plus rapproch\u00e9s :  Notebook Capytale a613-2265790</li> <li>Correction : Disponible plus tard !</li> </ul>"},{"location":"T6%20Algorithmique/3dac/#synthese","title":"Synth\u00e8se","text":"<p>Une fonction <code>r\u00e9soudre(probl\u00e8me)</code> qui applique la m\u00e9thode \u00ab Diviser pour r\u00e9gner \u00bb se d\u00e9roule suivant les \u00e9tapes :</p> <ul> <li> <p>Cas de base : Si le <code>probl\u00e8me</code> est trivial, le r\u00e9soudre imm\u00e9diatement et renvoyer sa solution.</p> </li> <li> <p>Diviser : Sinon, diviser le <code>probl\u00e8me</code> en plusieurs sous-probl\u00e8mes ind\u00e9pendants.</p> </li> <li> <p>R\u00e9gner : R\u00e9soudre ces sous-probl\u00e8mes r\u00e9cursivement (c'est-\u00e0-dire appeler <code>r\u00e9soudre</code> sur ces sous-probl\u00e8mes).</p> </li> <li> <p>Combiner : Combiner les diff\u00e9rentes solutions des sous-probl\u00e8mes pour obtenir la solution au probl\u00e8me initial et la renvoyer. C'est usuellement l'\u00e9tape la plus difficile \u00e0 \u00e9laborer.</p> </li> </ul> <p>Par exemple, si l'on divise par deux le probl\u00e8me :</p> <p> </p> <p>D\u00e9terminer la solution d'un sous-probl\u00e8me s'effectue r\u00e9cursivement :</p> <p> </p> <p>Une fois les feuilles de l'arbre atteint (les cas de base), les solutions se propagent des feuilles \u00e0 la racine gr\u00e2ce \u00e0 l'\u00e9tape combiner.</p>"},{"location":"T6%20Algorithmique/dp/","title":"Programmation Dynamique","text":""},{"location":"T6%20Algorithmique/dp/#programmation-dynamique","title":"Programmation Dynamique","text":"<p>Liens utiles</p> <ul> <li>Diaporama \u00e0 venir (quelques probl\u00e8mes de conversion) !</li> <li>Cours / Activit\u00e9</li> </ul>"},{"location":"T6%20Algorithmique/dp/#exemple-rendu-de-monnaie","title":"Exemple - Rendu de monnaie","text":"<ol> <li> <p>D\u00e9finir les donn\u00e9es du probl\u00e8me :</p> <ul> <li>Somme \\(S\\) \u00e0 rendre.</li> <li>Les diff\u00e9rentes valeurs des pi\u00e8ces \\(P = \\left\\{ p_1,~ p_2,~ \\ldots~ ,~ p_n \\right\\}\\).</li> </ul> </li> <li> <p>Identifier l'objectif du probl\u00e8me.</p> <p>On souhaite minimiser le nombre de pi\u00e8ces rendus.</p> </li> <li> <p>Identifier une s\u00e9quence de choix \u00e0 effectuer.</p> <p>\u00c0 chaque \u00e9tape, on choisit une pi\u00e8ce d'une valeur particuli\u00e8re \u00e0 rendre.</p> </li> <li> <p>D\u00e9finir les variables qui caract\u00e9risent totalement l'\u00e9tat d'une \u00e9tape de d\u00e9cision.</p> <p>Lorsque qu'on choisit une pi\u00e8ce de valeur \\(v\\) et la rend, la somme \u00e0 rendre est retranch\u00e9e de \\(v\\). Donc l'\u00e9tat d'une \u00e9tape est caract\u00e9ris\u00e9 par une seule variable, \u00e0 savoir la somme restante \\(s\\) \u00e0 rendre.</p> </li> <li> <p>D\u00e9finir pr\u00e9cis\u00e9ment l'ensemble des choix possibles \u00e0 partir d'un \u00e9tat particulier.</p> <p>Soit une somme restante \\(s\\) \u00e0 rendre, l'ensemble des choix possibles est \\(\\big\\{ p \\in P ~\\big|~p \\leq s \\big\\}\\). Choisir une pi\u00e8ce de valeur \\(p\\) de cet ensemble m\u00e8ne vers l'\u00e9tat \\(s - p\\).</p> </li> <li> <p>D\u00e9finition r\u00e9cursive du co\u00fbt optimal :</p> <p>On d\u00e9finit \\(c^\\star(s)\\) comme le nombre minimum de pi\u00e8ces \u00e0 rendre pour rembourser la somme restante \\(s\\).</p> \\[c^\\star(s) = \\begin{cases} 0 &amp; \\text{si } s = 0 \\\\ 1 + \\min \\Big\\{ c^\\star(s - p) ~\\Big|~ p \\in P,\\ p \\leq s \\Big\\} &amp; \\text{sinon} \\end{cases}\\] <p>R\u00e9soudre le probl\u00e8me initial revient \u00e0 calculer \\(c^\\star(S)\\).</p> </li> <li> <p>Impl\u00e9mentation en Python :</p> Na\u00effCache <code>dict</code>Cache <code>list</code>Approche bottom-upCache <code>dict</code> + Solution <pre><code>def rendu(somme, pieces):\n    def c(s):\n        if s == 0:\n            return 0\n        else:\n            return min(c(s - p) + 1 for p in pieces if p &lt;= s)\n    return c(somme)\n\nprint('Co\u00fbt optimal :', rendu(25, [1, 5, 6, 7]))\n</code></pre> <pre><code>def rendu(somme, pieces):\n    cache = {}  # \u00e9tat \u2194 co\u00fbt optimal\n    # cache[\u00e9tat] = co\u00fbt optimal de l'\u00e9tat\n\n    def c(s):\n        if s not in cache:  # si on a pas d\u00e9j\u00e0 calcul\u00e9 le co\u00fbt opt. de cet \u00e9tat, on le calcule\n            if s == 0:\n                cache[s] = 0\n            else:\n                cache[s] = min(c(s - p) + 1 for p in pieces if p &lt;= s)\n        return cache[s] \n\n    return c(somme)\n\nprint('Co\u00fbt optimal :', rendu(25, [1, 5, 6, 7]))\n</code></pre> <pre><code>def rendu(somme, pieces):\n    cache = [None] * (somme + 1)  # cache[\u00e9tat] = cout opt. de l'\u00e9tat\n    cache[0] = 0  # on inclut le cas de base ici\n\n    def c(s):\n        if cache[s] is None:  # si on a pas d\u00e9j\u00e0 calcul\u00e9 le co\u00fbt opt. de cet \u00e9tat, on le calcule\n            cache[s] = min(c(s - p) + 1 for p in pieces if p &lt;= s)\n        return cache[s] \n\n    return c(somme)\n\nprint('Co\u00fbt optimal :', rendu(25, [1, 5, 6, 7]))\n</code></pre> <pre><code>def rendu(somme, pieces):\n    cache = [0] + [None] * somme \n    for s in range(1, somme + 1):\n        cache[s] = 1 + min(cache[s - p] for p in pieces if p &lt;= s)\n    return cache[somme]\n\nprint('Co\u00fbt optimal :', rendu(25, [1, 5, 6, 7]))\n</code></pre> <pre><code>def rendu(somme, pieces):\n    cache = {0: (0, None)}  # \u00e9tat &lt;-&gt; (co\u00fbt optimal, meilleur choix)\n\n    def c(s):\n        if s not in cache:\n            cache[s] = min((c(s - p) + 1, p) for p in pieces if p &lt;= s)\n        return cache[s][0]  # on retourne le co\u00fbt optimal\n\n    # 1. Remplir le cache\n    c(somme) \n\n    # 2. Retrouver la solution\n    solution = []\n    s = somme\n    while s != 0:\n        piece = cache[s][1]\n        solution.append(piece)\n        s -= piece\n\n    # 3. Renvoyer la solution optimale et le co\u00fbt optimal\n    return solution, cache[somme][0]\n\n\nprint(\"Solution / Co\u00fbt opt. :\", rendu(25, [1, 5, 6, 7]))\n</code></pre> </li> <li> <p>D\u00e9terminer la complexit\u00e9 :</p> <p>Il y a dans le pire des cas \\(S + 1\\) \u00e9tats. Pour chaque \u00e9tat, on a \\(|P| = n\\) choix, donc :</p> <ul> <li>Complexit\u00e9 en temps : \\(O(S \\cdot n)\\)</li> <li>Complexit\u00e9 en espace : \\(O(S)\\) </li> </ul> </li> </ol>"}]}